---
title: "cleaning_and_exploratory"
title_project: "Cancer epidemiology and "
format: html
editor: source
---

# Main references

-   Profiling global cancer incidence and mortality by socioeconomic development (doi:10.1002/ijc.33114). Here 175 countries were included and 27 cancer types were evaluated

-   Current and future burden of breast cancer: Global statistics for 2020 and 2040 https://doi.org/10.1016/j.breast.2022.08.010. 185 countries or territories were included - by sex and 18 age groups

-   Global burden of female breast cancer and its association with socioeconomic development status, 1990â€“2044 - 204 countries - Exposure variables: Metabolic factors and SDI

-   Global and regional trends in incidence and mortality of female breast cancer and associated factors at national level in 2000 to 2019 (10.1097/CM9.0000000000001814)

<<<<<<< HEAD
# Load packages \[-\]
=======
# Load packages [-]
>>>>>>> carlos_branch

```{r include = FALSE}
pacman::p_load(
  tidyverse,
  skimr, 
  janitor,
  rstatix,
  ggpubr,
  broom,
  car,
  tidymodels,
  performance,
  rio, 
  here,
  janitor,
  splines,
  ggformula,
<<<<<<< HEAD
  mgcv,
  ggcompare,
  ggpubr,
  scales,
  ggstream,
  colorRamps,
  grDevices,
  RColorBrewer,
  patchwork,
  ggbeeswarm)
```

## Import data

Incidence and mortality were retrieved from GLOBOCAN (<https://gco.iarc.fr/>)

Human Development Index (hdi), hdi composites, and socio demographic (sdi) index were retrieved from 
=======
  mgcv)
```

# Import data

Incidence and mortality were retrieved from GLOBOCAN (<https://gco.iarc.fr/>)

Human Development Index (hdi), hdi composites, and socio demographic (sdi) index were retrieved from (Junior completalo !!!)
>>>>>>> carlos_branch

SDI and quintiles were retrieved from IHME-Global Health Exchange Data: https://ghdx.healthdata.org/record/global-burden-disease-study-2021-gbd-2021-socio-demographic-index-sdi-1950%E2%80%932021

```{r include=FALSE}
<<<<<<< HEAD
globocan_mortality <-
  import(here("data", "raw", "globocan_mortality.csv")) |>
  janitor::clean_names() |>
  dplyr::filter(label != "Total") |>
  dplyr::select(-sex) |>
  dplyr::mutate(indicator = "mortality")
  

globocan_incidence <-
  import(here("data", "raw", "globocan_incidence.csv")) |>
  janitor::clean_names() |>
  dplyr::filter(label != "Total") |>
  dplyr::select(-sex)

common_columns <- c("alpha_3_code", "cancer_code", 
                    "label", "population_code_iso_un", 
                    "country")

globocan <- globocan_incidence |>
  dplyr::left_join(globocan_mortality, by = common_columns) |>
  dplyr::mutate(MIR = round(asr_world.y/asr_world.x, 2), indicator = "MIR")

=======
# Epidemiology
globocan_mortality <-
  import(here("data", "raw", "globocan_mortality.csv"))

globocan_incidence <-
  import(here("data", "raw", "globocan_incidence.csv"))

# Sociodemographic indicators
>>>>>>> carlos_branch
hdi_and_comp_2022 <-
  import(here("data", "raw", "hdi_and_composites_2022.csv"))

hdi_and_comp_2017 <-
  import(here("data", "raw", "hdi_and_composites_2017.csv"))

sdi_2018_to_2021 <-
  import(here("data", "raw", "sdi_2018_to_2021.csv"))

gdb_sdi_2021_and_quintiles <-
  import(here("data", "raw", "ihme_gdb_sdi_2021_and_quintiles.csv"))

<<<<<<< HEAD
## Complementary data
regiones_mundo <- import(here("data", "raw", "regiones_mundo.txt")) |>
  janitor::clean_names()

cancer_code <- import(here("data", "raw", "cancer_code.csv")) |>
  janitor::clean_names()


```

## Function to calculate Education and Income (EdI) Index
=======
# Complementary data
regiones_mundo <- import(here("data", "raw", "regiones_mundo.txt"))

cancer_code <- import(here("data", "raw", "cancer_code.csv"))
```

# Function to calculate Education and Income (EdI) Index
>>>>>>> carlos_branch

Estimation of EdI was based on the study of Lortet-Tieulent et al. (2020) (https://doi.org/10.1002/ijc.33114). For each country, the function below (calculate_EdI) takes as imput: - Expected Years of Scholarity (EYS) - Median Years of Scholarity (MYS) - Gross National Income per capita (GNI)

The function calculate_EdI asummes a max_EYS = 20, max_MYS = 15, min_GNI = 100, and max_GNI = 75000

Imput data were retrieved from (Junior completalo)

```{r}
# Define the function to calculate EdI
<<<<<<< HEAD
calculate_EdI = function(EYS, 
                         MYS, 
                         GNI_per_capita,
                         max_EYS = 20, 
                         max_MYS = 15, 
                         min_GNI = 100, 
                         max_GNI = 75000) {
=======
calculate_EdI = function(EYS, MYS, GNI_per_capita, 
                          max_EYS = 20, max_MYS = 15, 
                          min_GNI = 100, max_GNI = 75000) {
>>>>>>> carlos_branch
  
  # Normalize education indicators
  norm_EYS <- EYS / max_EYS
  norm_MYS <- MYS / max_MYS
  education_index <- (norm_EYS + norm_MYS) / 2
  
  # Normalize GNI per capita
<<<<<<< HEAD
  norm_GNI <- 
    (log(GNI_per_capita) - log(min_GNI)) / (log(max_GNI) - log(min_GNI))
=======
  norm_GNI <- (log(GNI_per_capita) - log(min_GNI)) / (log(max_GNI) - log(min_GNI))
>>>>>>> carlos_branch
  
  # Calculate EdI
  EdI <- sqrt(education_index * norm_GNI)
  
  return(EdI)
}
```

<<<<<<< HEAD
## Calculation and categorization of Education and Income (EdI) Index

```{r}
# Apply the calculate_EdI function to the dataframe
hdi_and_comp_2022_0 = 
  hdi_and_comp_2022 |>
  mutate(Education_and_Income = 
           calculate_EdI(
             MYS = Mean_years_of_schooling_y,
             EYS = Expected_years_of_schooling_y,
             GNI_per_capita = GNI_per_capita_2017PPP_dolar
             ),
         edi_categories = case_when(
           Education_and_Income < .53 ~ "Low",
           Education_and_Income >= .53 & Education_and_Income < .70 ~ "Medium",
           Education_and_Income >= .70 & Education_and_Income < .80 ~ "High",
           Education_and_Income >= .80 ~ "Very high"))
```

=======
>>>>>>> carlos_branch
# Tidying data

## Epidemiological data

Overall, 185 countries have incidence and mortality data

```{r include=FALSE}
<<<<<<< HEAD
globocan_0 <- merge(globocan, cancer_code, by = "cancer_code", all.x = TRUE)

globocan_0 <- globocan_0 |>
  dplyr::rename(cancer_type = label.y, Country_name = label.x) |>
  dplyr::filter(Country_name != "Total")

countries_with_epid_data <- unique(globocan_0$Country_name)
=======
globocan = clean_names(rbind(globocan_incidence, globocan_mortality))
cancer_code = clean_names(cancer_code)


globocan_0 <- merge(globocan, cancer_code, by = "cancer_code", all.x = TRUE)

globocan_0 = 
  globocan_0 |>
  rename(cancer_type = "label.y",
        Country_name = "label.x") |>
  filter(Country_name != "Total") 

countries_with_epid_data = unique(globocan_0$Country_name)
>>>>>>> carlos_branch
```

## Socioeconomic indicators

Korea (Democratic People's Rep. of) and Monaco were removed because there were no data available regarding **hdi** and **hdi**'s composites.

The following countries or regions are considered as Developing countries: Arab States, East Asia and the Pacific, Europe and Central Asia, Latin America and the Caribbean, South Asia, Sub-Saharan Africa.

Cabo verde, France, and Netherlands (as appeared on hdi_and_com_2022) have been changed to Cape verde, France (metropolitans), and The Netherlands (Metropolitan) Venezuela (Boliarian Republic of) has been changed to Venezuela France to France (metropolitan) Democratic People's Republic of Korea has been changed to Korea, Democratic People Republic of Iran (Islamic Republic of) to Iran, Islamic Republic of Democratic Republic of the Congo to Congo, Democratic People Republic of Gambia to The Republic of the Gambia Netherlands to The Netherlands Republic of Korea to Korea, Republic of Cabo Verde to Cape Verde Republic of Moldova to Moldova Bosnia and Herzegovina to Bosnia Herzegovina Bolivia (Plurinational State of) to Bolivia United Republic of Tanzania to Tanzania, United Republic of China (without Hong Kong and Macao) to China

Total == World Global estimation

<<<<<<< HEAD
## Exploring the number of countries with socioeconomic indicators

Socio Demographic index (SDI), n = 170 Human Development Index (HDI), n = 175 Education and Income (EDI), Index =

```{r}
## SDI
sdi_2018_to_2021_0 <- sdi_2018_to_2021 |>
  dplyr::filter(sdi_2018_to_2021$Country %in% countries_with_epid_data)

gdb_sdi_2021_and_quintiles <- gdb_sdi_2021_and_quintiles |> 
  janitor::clean_names()

gdb_sdi_2021_and_quintiles_0 <- gdb_sdi_2021_and_quintiles |>
  dplyr::select(-location_id) |>
  dplyr::rename(
    Country_name = location_name,
    sdi_gdb_2021 = x2021_sdi_index_value,
    sdi_categories = sdi_quintile
  ) |> 
  dplyr::filter(gdb_sdi_2021_and_quintiles$location_name %in% countries_with_epid_data)

## HDI
hdi_and_comp_2017_0 <- hdi_and_comp_2017 |>
  dplyr::filter(hdi_and_comp_2017$Country %in% countries_with_epid_data)

hdi_and_comp_2022_0 <- hdi_and_comp_2022_0 |>
  dplyr::filter(hdi_and_comp_2022_0$Country %in% countries_with_epid_data) |>
  dplyr::rename(Country_name = Country)

# Countries without indicator data
dplyr::setdiff(countries_with_epid_data, gdb_sdi_2021_and_quintiles$Location.Name)
=======
## Calculation and categorization of Education and Income (EdI) Index

```{r}
# Apply the calculate_EdI function to the dataframe
hdi_and_comp_2022_0 = 
  hdi_and_comp_2022 |>
  mutate(Education_and_Income = 
           calculate_EdI(MYS = Mean_years_of_schooling_y,
                         EYS = Expected_years_of_schooling_y,
                         GNI_per_capita = GNI_per_capita_2017PPP_dolar),
         edi_categories = case_when(Education_and_Income < .53 ~ "Low",
                                    Education_and_Income >= .53 &
                                      Education_and_Income < .70 ~ "Medium", 
                                    Education_and_Income >= .70 &
                                      Education_and_Income < .80 ~ "High",
                                    Education_and_Income >= .80 ~ "Very high"))
```

## Exploring the number of countries with socioeconomic indicators

Socio Demographic index (SDI), n = 170

Human Development Index (HDI), n = 175

Education and Income (EDI), Index =

```{r}
dim(hdi_and_comp_2022) # [1] 200  10
dim(hdi_and_comp_2017) # [1] 196  10
dim(sdi_2018_to_2021) # [1] 229   5
sdi_2018_to_2021_0 <-
  sdi_2018_to_2021 |> 
  filter(sdi_2018_to_2021$Country %in% countries_with_epid_data) ##

gdb_sdi_2021_and_quintiles <- gdb_sdi_2021_and_quintiles |> janitor::clean_names()

gdb_sdi_2021_and_quintiles_0 =
  gdb_sdi_2021_and_quintiles |> 
  select(-location_id) |>
  rename(Country_name = "location_name",
         sdi_gdb_2021 = "x2021_sdi_index_value",
         sdi_categories = "sdi_quintile") |> 
  filter(gdb_sdi_2021_and_quintiles$location_name %in% countries_with_epid_data)
  

hdi_and_comp_2017_0 = 
  hdi_and_comp_2017 |>
  filter(hdi_and_comp_2017$Country %in% countries_with_epid_data)

hdi_and_comp_2022_0 = 
  hdi_and_comp_2022_0 |>
  filter(hdi_and_comp_2022_0$Country %in% countries_with_epid_data) |> 
  rename(Country_name = "Country")

dim(hdi_and_comp_2017_0) # [1] 171  10
dim(hdi_and_comp_2022_0) # [1] 176  10
dim(sdi_2018_to_2021_0) # [1] 170   5

# Countries without indicator data
setdiff(countries_with_epid_data, gdb_sdi_2021_and_quintiles$Location.Name)
>>>>>>> carlos_branch
```

## Matching epidemiological data and indicators

```{r}
<<<<<<< HEAD
sdi_2018_to_2021_0 <- sdi_2018_to_2021_0 |>
  dplyr::rename(Country_name = "Country")

globocan_1 = globocan_0 |>
  dplyr::left_join(hdi_and_comp_2022_0, by = "Country_name")

globocan_2 <- globocan_1 |>
  dplyr::left_join(sdi_2018_to_2021_0, by = "Country_name")

globocan_3 <- globocan_2 |>
  dplyr::left_join(gdb_sdi_2021_and_quintiles_0, by = "Country_name")

colnames(globocan_3) = gsub("\\_y$", "", colnames(globocan_3))
globocan_3 = janitor::clean_names(globocan_3)
=======
sdi_2018_to_2021_0 = 
  sdi_2018_to_2021_0 |> 
  rename(Country_name = "Country")

globocan_1 = globocan_0 %>%
  left_join(hdi_and_comp_2022_0, by = "Country_name")

globocan_2 = 
  globocan_1 |> 
  left_join(sdi_2018_to_2021_0, by = "Country_name")

globocan_3 =
  globocan_2 |> 
  left_join(gdb_sdi_2021_and_quintiles_0, by = "Country_name")

colnames(globocan_3) = gsub("\\_y$", "", colnames(globocan_3))
globocan_3 = clean_names(globocan_3)
>>>>>>> carlos_branch
```

## Classifying cancers

```{r}
<<<<<<< HEAD
globocan_4 <- globocan_3 |>
  dplyr::mutate(
    neoplasia_sex = case_when(
      cancer_type %in% c(
        "Lip, oral cavity", "Salivary glands", "Oropharynx", "Nasopharynx",
        "Hypopharynx", "Oesophagus", "Stomach", "Colon", "Rectum", "Anus",
        "Liver and intrahepatic bile ducts", "Gallbladder", "Pancreas",
        "Larynx", "Trachea, bronchus and lung", "Melanoma of skin",
        "Non-melanoma skin cancer", "Mesothelioma", "Kaposi sarcoma",
        "Breast", "Kidney", "Bladder", "Thyroid", "Hodgkin lymphoma",
        "Non-Hodgkin lymphoma", "Multiple myeloma", "Leukaemia",
        "All cancers excl. non-melanoma skin cancer", "Colorectum",
        " Brain, central nervous system") ~ "Both",
      cancer_type %in% c(
        "Vulva", "Vagina", "Cervix uteri", "Ovary", "Corpus uteri") ~ "Female",
      cancer_type %in% c(
        "Penis", "Prostate", "Testis") ~ "Male"
    ),
    tumor_types = case_when(
      cancer_type %in% c(
        "Lip, oral cavity", "Oropharynx", "Nasopharynx", "Hypopharynx", "Larynx",
        "Vulva", "Vagina", "Penis") ~ "Squamous cell carcinoma",
      cancer_type %in% c(
        "Salivary glands", "Stomach", "Colon", "Colorectum", "Rectum", "Pancreas",
        "Breast", "Ovary", "Corpus uteri", "Prostate", "Testis", "Kidney",
        "Thyroid") ~ "Adenocarcinoma",
      cancer_type %in% c(
        "Gallbladder", "Oesophagus", "Anus", "Trachea, bronchus and lung",
        "Cervix uteri") ~ "Squamous cell/Adenocarcinoma",
      cancer_type %in% c("Hodgkin lymphoma", "Non-Hodgkin lymphoma") ~ "Lymphoma",
      cancer_type %in% c("Melanoma of skin", "Non-melanoma skin cancer") ~ "Skin",
      TRUE ~ "Others"
    ), 
    malignant_neoplasms_types = case_when(
      cancer_type %in% c(
        "Lip, oral cavity", "Salivary glands", "Oropharynx", "Nasopharynx", 
        "Hypopharynx") ~ "Lip, oral cavity and pharynx",
      cancer_type %in% c(
        "Oesophagus", "Stomach", "Colon", "Colorectum", "Rectum", "Anus",
        "Liver and intrahepatic bile ducts", "Gallbladder", 
        "Pancreas") ~ "Digestive organs",
      cancer_type %in% c(
        "Larynx", "Trachea, bronchus and lung") ~ "Respiratory and intrathoracic organs",
      cancer_type %in% c(
        "Melanoma of skin",
        "Non-melanoma skin cancer") ~ "Melanoma and other malignant neoplasms of skin",
      cancer_type %in% c(
        "Mesothelioma", "Kaposi sarcoma") ~ "Mesothelial and soft tissue",
      cancer_type == "Breast" ~ "Breast",
      cancer_type %in% c(
        "Vulva", "Vagina", "Cervix uteri", "Ovary", 
        "Corpus uteri") ~ "Female genital organs",
      cancer_type %in% c("Penis", "Prostate", "Testis") ~ "Male genital organs",
      cancer_type %in% c("Kidney", "Bladder") ~ "Urinary tract",
      cancer_type %in% c(
        "Hodgkin lymphoma", "Non-Hodgkin lymphoma", "Multiple myeloma",
        "Leukaemia") ~ "Lymphoid, haematopoietic and related tissue",
      cancer_type == "Thyroid" ~ "Thyroid and other endocrine glands",
      cancer_type == " Brain, central nervous system" ~ "Eye, brain and other parts of central nervous system",
      TRUE ~ "Others"
    ),
    asr_incidence_quartiles = case_when(
      cancer_type == "All cancers excl. non-melanoma skin cancer" &
        indicator_x == "incidence" &
        asr_world_x <= 113.5 ~ "incidence_Q1",
      cancer_type == "All cancers excl. non-melanoma skin cancer" &
        indicator_x == "incidence" &
        asr_world_x > 113.5 & asr_world_x <= 152.5 ~ "incidence_Q2",
      cancer_type == "All cancers excl. non-melanoma skin cancer" &
        indicator_x == "incidence" &
        asr_world_x > 152.5 & asr_world_x <= 227.3 ~ "incidence_Q3",
      cancer_type == "All cancers excl. non-melanoma skin cancer" &
        indicator_x == "incidence" &
        asr_world_x > 227.3 ~ "incidence_Q4"
    ),
    asr_mortality_quartiles = case_when(
      cancer_type == "All cancers excl. non-melanoma skin cancer" &
        indicator_y == "mortality" &
        asr_world_y <= 74.90 ~ "mortality_Q1",
      cancer_type == "All cancers excl. non-melanoma skin cancer" &
        indicator_y == "mortality" &
        asr_world_y > 74.90 & asr_world_y <= 89.50 ~ "mortality_Q2",
      cancer_type == "All cancers excl. non-melanoma skin cancer" & 
        indicator_y == "mortality" &
        asr_world_y > 89.50 & asr_world_y <= 103.20 ~ "mortality_Q3",
      cancer_type == "All cancers excl. non-melanoma skin cancer" &
        indicator_y == "mortality" &
        asr_world_y > 103.20 ~ "mortality_Q4"
    ),
    mir_quartiles = case_when(
      cancer_type == "All cancers excl. non-melanoma skin cancer" &
        indicator == "MIR" &
        mir <= 0.4600 ~ "MIR_Q1",
      cancer_type == "All cancers excl. non-melanoma skin cancer" &
        indicator == "MIR" &
        mir > 0.4600 & mir <= 0.5700 ~ "MIR_Q2",
      cancer_type == "All cancers excl. non-melanoma skin cancer" &
        indicator == "MIR" &
        mir > 0.5700 & mir <= 0.6900 ~ "MIR_Q3",
      cancer_type == "All cancers excl. non-melanoma skin cancer" &
        indicator == "MIR" &
        mir > 0.6900 ~ "MIR_Q4"
    ))
=======
globocan_4 <- 
  globocan_3 |>
  mutate(
    neoplasia_sex = case_when(
      cancer_type == "Lip, oral cavity" ~ "Both",
      cancer_type == "Salivary glands" ~ "Both",
      cancer_type == "Oropharynx" ~ "Both",
      cancer_type == "Nasopharynx" ~ "Both",
      cancer_type == "Hypopharynx" ~ "Both",
      cancer_type == "Oesophagus" ~ "Both",
      cancer_type == "Stomach" ~ "Both",
      cancer_type == "Colon" ~ "Both",
      cancer_type == "Rectum" ~ "Both",
      cancer_type == "Anus" ~ "Both",
      cancer_type == "Liver and intrahepatic bile ducts" ~ "Both",
      cancer_type == "Gallbladder" ~ "Both",
      cancer_type == "Pancreas" ~ "Both",
      cancer_type == "Larynx" ~ "Both",
      cancer_type == "Trachea, bronchus and lung" ~ "Both",
      cancer_type == "Melanoma of skin" ~ "Both",
      cancer_type == "Non-melanoma skin cancer" ~ "Both",
      cancer_type == "Mesothelioma" ~ "Both",
      cancer_type == "Kaposi sarcoma" ~ "Both",
      cancer_type == "Breast" ~ "Both",
      cancer_type == "Vulva" ~ "Female",
      cancer_type == "Vagina" ~ "Female",
      cancer_type == "Cervix uteri" ~ "Female",
      cancer_type == "Ovary" ~ "Female",
      cancer_type == "Corpus uteri" ~ "Female",
      cancer_type == "Penis" ~ "Male",
      cancer_type == "Prostate" ~ "Male",
      cancer_type == "Testis" ~ "Male",
      cancer_type == "Kidney" ~ "Both",
      cancer_type == "Bladder" ~ "Both",
      cancer_type == "Thyroid" ~ "Both",
      cancer_type == "Hodgkin lymphoma" ~ "Both",
      cancer_type == "Non-Hodgkin lymphoma" ~ "Both",
      cancer_type == "Multiple myeloma" ~ "Both",
      cancer_type == "Leukaemia" ~ "Both",
      cancer_type == "All cancers excl. non-melanoma skin cancer" ~ "Both",
      cancer_type == "Colorectum" ~ "Both",
      cancer_type == " Brain, central nervous system" ~ "Both"),
    tumor_types = case_when(
      cancer_type == "Lip, oral cavity" ~ "Squamous cell carcinoma",
      cancer_type == "Salivary glands" ~ "Adenocarcinoma",
      cancer_type == "Oropharynx" ~ "Squamous cell carcinoma",
      cancer_type == "Nasopharynx" ~ "Squamous cell carcinoma",
      cancer_type == "Hypopharynx" ~ "Squamous cell carcinoma",
      cancer_type == "Oesophagus" ~ "Squamous cell/Adenocarcinoma",
      cancer_type == "Stomach" ~ "Adenocarcinoma",
      cancer_type == "Colon" ~ "Adenocarcinoma",
      cancer_type == "Colorectum" ~ "Adenocarcinoma",
      cancer_type == "Rectum" ~ "Adenocarcinoma",
      cancer_type == "Anus" ~ "Squamous cell/Adenocarcinoma",
      cancer_type == "Liver and intrahepatic bile ducts" ~ 
        "Hepatocellular/Adenocarcinoma",
      cancer_type == "Gallbladder" ~ "Squamous cell/Adenocarcinoma",
      cancer_type == "Pancreas" ~ "Adenocarcinoma",
      cancer_type == "Larynx" ~ "Squamous cell carcinoma",
      cancer_type == "Trachea, bronchus and lung" ~ "Squamous cell/Adenocarcinoma",
      cancer_type == "Melanoma of skin" ~ "Melanoma",
      cancer_type == "Non-melanoma skin cancer" ~ "Squamous/basal cell carcinoma",
      cancer_type == "Mesothelioma" ~ "Mesothelioma",
      cancer_type == "Kaposi sarcoma" ~ "Sarcoma",
      cancer_type == "Breast" ~ "Adenocarcinoma",
      cancer_type == "Vulva" ~ "Squamous cell carcinoma",
      cancer_type == "Vagina" ~ "Squamous cell carcinoma",
      cancer_type == "Cervix uteri" ~ "Squamous cell/Adenocarcinoma",
      cancer_type == "Ovary" ~ "Adenocarcinoma",
      cancer_type == "Corpus uteri" ~ "Adenocarcinoma",
      cancer_type == "Penis" ~ "Squamous cell carcinoma",
      cancer_type == "Prostate" ~ "Adenocarcinoma",
      cancer_type == "Testis" ~ "Adenocarcinoma",
      cancer_type == "Kidney" ~ "Adenocarcinoma",
      cancer_type == "Bladder" ~ "Urothelial carcinoma",
      cancer_type == "Thyroid" ~ "Adenocarcinoma",
      cancer_type == "Hodgkin lymphoma" ~ "Lymphoma",
      cancer_type == "Non-Hodgkin lymphoma" ~ "Lymphoma",
      cancer_type == "Multiple myeloma" ~ "Myeloma",
      cancer_type == "Leukaemia" ~ "Leukaemia",
      cancer_type == "All cancers excl. non-melanoma skin cancer" ~ "Others",
      cancer_type == " Brain, central nervous system" ~ "Brain and spinal cord cancers"),
    malignant_neoplasms_types = case_when(
      cancer_type == "Lip, oral cavity" ~ "Lip, oral cavity and pharynx",
      cancer_type == "Salivary glands" ~ "Lip, oral cavity and pharynx",
      cancer_type == "Oropharynx" ~ "Lip, oral cavity and pharynx",
      cancer_type == "Nasopharynx" ~ "Lip, oral cavity and pharynx",
      cancer_type == "Hypopharynx" ~ "Lip, oral cavity and pharynx",
      cancer_type == "Oesophagus" ~ "Digestive organs",
      cancer_type == "Stomach" ~ "Digestive organs",
      cancer_type == "Colon" ~ "Digestive organs",
      cancer_type == "Colorectum" ~ "Digestive organs",
      cancer_type == "Rectum" ~ "Digestive organs",
      cancer_type == "Anus" ~ "Digestive organs",
      cancer_type == "Liver and intrahepatic bile ducts" ~ "Digestive organs",
      cancer_type == "Gallbladder" ~ "Digestive organs",
      cancer_type == "Pancreas" ~ "Digestive organs",
      cancer_type == "Larynx" ~ "Respiratory and intrathoracic organs",
      cancer_type == "Trachea, bronchus and lung" ~ "Respiratory and intrathoracic organs",
      cancer_type == "Melanoma of skin" ~ "Melanoma and other malignant neoplasms of skin",
      cancer_type == "Non-melanoma skin cancer" ~ "Melanoma and other malignant neoplasms of skin",
      cancer_type == "Mesothelioma" ~ "Mesothelial and soft tissue",
      cancer_type == "Kaposi sarcoma" ~ "Mesothelial and soft tissue",
      cancer_type == "Breast" ~ "Breast",
      cancer_type == "Vulva" ~ "Female genital organs",
      cancer_type == "Vagina" ~ "Female genital organs",
      cancer_type == "Cervix uteri" ~ "Female genital organs",
      cancer_type == "Ovary" ~ "Female genital organs",
      cancer_type == "Corpus uteri" ~ "Female genital organs",
      cancer_type == "Penis" ~ "Male genital organs",
      cancer_type == "Prostate" ~ "Male genital organs",
      cancer_type == "Testis" ~ "Male genital organs",
      cancer_type == "Kidney" ~ "Urinary tract",
      cancer_type == "Bladder" ~ "Urinary tract",
      cancer_type == "Thyroid" ~ "Thyroid and other endocrine glands",
      cancer_type == "Hodgkin lymphoma" ~ "Lymphoid, haematopoietic and related tissue",
      cancer_type == "Non-Hodgkin lymphoma" ~ "Lymphoid, haematopoietic and related tissue",
      cancer_type == "Multiple myeloma" ~ "Lymphoid, haematopoietic and related tissue",
      cancer_type == "Leukaemia" ~ "Lymphoid, haematopoietic and related tissue",
      cancer_type == "All cancers excl. non-melanoma skin cancer" ~ "Other of skin and independent multiple sites",
      cancer_type == " Brain, central nervous system" ~ "Eye, brain and other parts of central nervous system"),
    number_quartiles = case_when(
      indicator == "incidence" & number <= 31.00 ~ "incidence_Q1",
      indicator == "incidence" & number > 31.00 & number <= 195.00 ~ "incidence_Q2",
      indicator == "incidence" & number > 195.00 & number <= 1088.25 ~ "incidence_Q3",
      indicator == "incidence" & number > 1088.25 & number <= 4775419.00 ~ "incidence_Q4",
      indicator == "mortality" & number <= 19.00 ~ "mortality_Q1",
      indicator == "mortality" & number > 19.00 & number <= 112.00 ~ "mortality_Q2",
      indicator == "mortality" & number > 112.00 & number <= 635.75 ~ "mortality_Q3",
      indicator == "mortality" & number > 635.75 & number <= 2560612.00 ~ "mortality_Q4"),
    asr_world_quartiles = case_when(
      indicator == "incidence" & asr_world <= 0.65 ~ "incidence_Q1",
      indicator == "incidence" & asr_world > 0.65 & asr_world <= 2.50 ~ "incidence_Q2",
      indicator == "incidence" & asr_world > 2.50 & asr_world <= 7.20 ~ "incidence_Q3",
      indicator == "incidence" & asr_world > 7.20 & asr_world <= 349.80 ~ "incidence_Q4",
      indicator == "mortality" & asr_world <= 0.31 ~ "mortality_Q1",
      indicator == "mortality" & asr_world > 0.31 & asr_world <= 1.50 ~ "mortality_Q2",
      indicator == "mortality" & asr_world > 1.50 & asr_world <= 4.10 ~ "mortality_Q3",
      indicator == "mortality" & asr_world > 4.10 & asr_world <= 181.30 ~ "mortality_Q4"),
    crude_rate_quartiles = case_when(
      indicator == "incidence" & crude_rate <= 0.64 ~ "incidence_Q1",
      indicator == "incidence" & crude_rate > 0.64 & crude_rate <= 2.40 ~ "incidence_Q2",
      indicator == "incidence" & crude_rate > 2.40 & crude_rate <= 9.60 ~ "incidence_Q3",
      indicator == "incidence" & crude_rate > 9.60 & crude_rate <= 790.60 ~ "incidence_Q4",
      indicator == "mortality" & crude_rate <= 0.33 ~ "mortality_Q1",
      indicator == "mortality" & crude_rate > 0.33 & crude_rate <= 1.40 ~ "mortality_Q2",
      indicator == "mortality" & crude_rate > 1.40 & crude_rate <= 5.90 ~ "mortality_Q3",
      indicator == "mortality" & crude_rate > 5.90 & crude_rate <= 338.40 ~ "mortality_Q4")
    )
>>>>>>> carlos_branch
```

### Adding world regions

```{r}
<<<<<<< HEAD
globocan_5 <- globocan_4 |> 
  dplyr::left_join(regiones_mundo, by = "country_name")

globocan_6 <- globocan_5 |>
  dplyr::select(
    cancer_type,
    country_name,
    mir,
    asr_world_x,
    asr_world_y,
    human_development_index,
    education_and_income,
    sdi_gdb_2021,
    hdi_category,
    edi_categories,
    sdi_categories,
    neoplasia_sex
  ) |>
  dplyr::rename(
    HDI = human_development_index,
    EdI = education_and_income,
    SDI = sdi_gdb_2021
  ) |>
  tidyr::pivot_longer(
    cols = c("mir", "asr_world_x", "asr_world_y"),
    names_to = "indicator",
    values_to = "asr_world"
  ) |>
  dplyr::mutate(
    indicator = factor(indicator) |>
      forcats::fct_recode(
        "Incidence" = "asr_world_x", 
        "Mortality" = "asr_world_y",
        "MIR" = "mir"),
    country_label = case_when(
      country_name %in% c(
        "United States of America", "Bolivia", "Spain", "Ethiopia", "China",
        "Japan", "India", "Peru", "Egypt", "Saudi Arabia", 
        "France (metropolitan)", "Uganda") ~ as.character(country_name),
      TRUE ~ NA_character_
    ) |>
      forcats::fct_recode(
        "USA" = "United States of America", "France" = "France (metropolitan)")
  )

# globocan_6 |>
#   dplyr::select(country_name, SDI) |>
#   dplyr::filter(SDI > 0.9 & SDI <=9.27) |>
#   dplyr::arrange(SDI) |>
#   dplyr::distinct(country_name)
# globocan_6 |> dplyr::distinct(country_sdi)

# Complex names data
globocan_7 <- globocan_6 |>
  dplyr::distinct(cancer_type, country_name, indicator, .keep_all = TRUE)

# Clean names data
globocan_8 <- globocan_7 |>
  dplyr::mutate(
    cancer_type = case_when(
      cancer_type == " Brain, central nervous system" ~ "Brain, nervous system",
      cancer_type == "Liver and intrahepatic bile ducts" ~ "Liver",
      .default = as.character(cancer_type))
  ) |>
  janitor::clean_names()
=======
globocan_5 = globocan_4 |> 
  left_join(regiones_mundo, by = "country_name")
>>>>>>> carlos_branch
```

# Exploratory data analysis

## Globocan

## Descriptive statistics by indicator

```{r}
<<<<<<< HEAD
globocan_8 |>
  distinct(country_name, 
           cancer_type, 
           indicator, .keep_all = TRUE) |>
  filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  filter(indicator == "miratio" & cancer_type == "Breast") |> # Change as appropiate
  select(asr_world) |> 
=======
globocan_5 |>
  distinct(country_name, .keep_all = TRUE) |> 
  filter(indicator == "incidence") |> # Change as appropiate
  select(asr_world, hdi_category,
         education_and_income, human_development_index,
         sdi_gdb_2021) |> 
>>>>>>> carlos_branch
  skim()
```

## Visual inspection

### HDI and composites

```{r}
hdi_counts <- 
<<<<<<< HEAD
  globocan_8 |> 
=======
  globocan_5 |> 
>>>>>>> carlos_branch
  filter(hdi_category != "") |> 
  distinct(country_name, .keep_all = TRUE) |> 
  count(hdi_category)

edi_counts = 
<<<<<<< HEAD
  globocan_8 |> 
=======
  globocan_5 |> 
>>>>>>> carlos_branch
  filter(edi_categories != "") |> 
  distinct(country_name, .keep_all = TRUE) |> 
  count(edi_categories)

hdi_labels <- data.frame(hdi_category = c("High", "Low", "Medium", "Very high"), 
                       label = c("n = 42", "n = 33", "n = 38", "n = 62"))

edi_labels <- data.frame(edi_categories = c("High", "Low", "Medium", "Very high"), 
                       label = c("n = 34", "n = 43", "n = 49", "n = 49"))
```

```{r}
<<<<<<< HEAD
globocan_8 |> 
  filter(hdi_category != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  ggplot(aes(x = hdi,
=======
globocan_5 |> 
  filter(hdi_category != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  ggplot(aes(x = human_development_index,
>>>>>>> carlos_branch
             fill = hdi_category)) +
  geom_histogram(alpha = 0.5) +
  facet_wrap(~hdi_category, scales = "free") +
  theme_minimal() +
  geom_text(aes(label = label), data = hdi_labels,
              x = Inf, y = Inf, hjust = 1.1, vjust = 1.1,
            inherit.aes = FALSE, 
            size = 7.5) +
  theme(text = element_text(size = 20))
```

```{r}
<<<<<<< HEAD
globocan_8 |>
  filter(edi_categories != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  ggplot(aes(x = ed_i,
=======
globocan_5 |>
  filter(edi_categories != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  ggplot(aes(x = education_and_income,
>>>>>>> carlos_branch
             fill = edi_categories)) +
  geom_histogram(alpha = 0.5) +
  facet_wrap(~edi_categories, scales = "free") +
  theme_minimal() +
  geom_text(aes(label = label), data = edi_labels,
              x = Inf, y = Inf, hjust = 1.1, vjust = 1.1,
            inherit.aes = FALSE,
            size = 7.5) +
  theme(text = element_text(size = 20))
```

```{r}
hdi_p =
<<<<<<< HEAD
  globocan_8 |> 
  filter(hdi_category != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  ggplot(aes(x = hdi,
=======
  globocan_5 |> 
  filter(hdi_category != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  ggplot(aes(x = human_development_index,
>>>>>>> carlos_branch
             fill = hdi_category)) +
  geom_histogram(position = "identity", 
                 alpha = .5) +
  labs(x = "Human Development Index") +
  theme_minimal() +
  theme(text = element_text(size = 20))

edi_p = 
<<<<<<< HEAD
  globocan_8 |> 
  filter(edi_categories != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  ggplot(aes(x = ed_i,
=======
  globocan_5 |> 
  filter(edi_categories != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  ggplot(aes(x = education_and_income,
>>>>>>> carlos_branch
             fill = edi_categories)) +
  geom_histogram(position = "identity", 
                 alpha = .5) +
  labs(x = "Education and Income Index") +
  theme_minimal() +
  theme(text = element_text(size = 20))

ggarrange(hdi_p, edi_p, nrow = 2, ncol = 1)

sdi_p = 
<<<<<<< HEAD
  globocan_8 |> 
  filter(sdi_categories != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  ggplot(aes(x = sdi,
=======
  globocan_5 |> 
  filter(sdi_categories != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  ggplot(aes(x = sdi_gdb_2021,
>>>>>>> carlos_branch
             fill = sdi_categories)) +
  geom_histogram(position = "identity", 
                 alpha = .5) +
  labs(x = "Sociodemographic index") +
  theme_minimal() +
  theme(text = element_text(size = 20))

ggarrange(hdi_p, edi_p, sdi_p,
          nrow = 3, ncol = 1)
```

### Proportions and counts by categories

```{r}
hdi_cat = 
<<<<<<< HEAD
  globocan_8 |>
=======
  globocan_5 |>
>>>>>>> carlos_branch
  filter(hdi_category != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  ggplot(aes(x = hdi_category, fill = hdi_category)) + 
  geom_bar(alpha = 0.4) +
  theme_minimal()

hdi_prop = 
<<<<<<< HEAD
  globocan_8 |>
=======
  globocan_5 |>
>>>>>>> carlos_branch
  filter(hdi_category != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  count(hdi_category) |> 
  mutate(proportion = n / sum(n))  |> 
  ggplot(aes(x = hdi_category, y = proportion,
             fill = hdi_category)) +
  geom_bar(stat = "identity", alpha = 0.4) +
  theme_minimal()

edi_cat = 
<<<<<<< HEAD
  globocan_8 |>
=======
  globocan_5 |>
>>>>>>> carlos_branch
  filter(edi_categories != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  ggplot(aes(x = edi_categories, fill = edi_categories)) + 
  geom_bar(alpha = .4)

edi_prop = 
<<<<<<< HEAD
  globocan_8 |> 
=======
  globocan_5 |> 
>>>>>>> carlos_branch
  filter(edi_categories != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  count(edi_categories) |> 
  mutate(proportion = n / sum(n))  |> 
  ggplot(aes(x = edi_categories, y = proportion,
             fill = edi_categories)) +
  geom_bar(stat = "identity", alpha = 0.4) 

sdi_cat = 
<<<<<<< HEAD
  globocan_8 |>
=======
  globocan_5 |>
>>>>>>> carlos_branch
  filter(sdi_categories != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  ggplot(aes(x = sdi_categories, fill = sdi_categories)) + 
  geom_bar(alpha = .4)

sdi_prop = 
<<<<<<< HEAD
  globocan_8 |> 
=======
  globocan_5 |> 
>>>>>>> carlos_branch
  filter(sdi_categories != "") |>
  distinct(country_name, .keep_all = TRUE) |> 
  count(sdi_categories) |> 
  mutate(proportion = n / sum(n))  |> 
  ggplot(aes(x = sdi_categories, y = proportion,
             fill = sdi_categories)) +
  geom_bar(stat = "identity", alpha = 0.4) 


ggarrange(hdi_cat, hdi_prop, 
          edi_cat, edi_prop,
          sdi_cat, sdi_prop,
          ncol = 2,
          nrow = 3)
```

<<<<<<< HEAD
### Histogram of the distribution of epidemiological indicators

```{r}
mean_incidence <- globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "Incidence") |>
  group_by(cancer_type) |>
  summarise(mean_asr_world = mean(asr_world, na.rm = TRUE))

globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Incidence") |> 
=======
### Histogram of the distribution of incidence and mortality

```{r}

mean_incidence <- globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "incidence") |>
  group_by(cancer_type) |>
  summarise(mean_asr_world = mean(asr_world, na.rm = TRUE))

globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "incidence") |> 
>>>>>>> carlos_branch
  ggplot(aes(asr_world)) + 
  geom_histogram() +
  facet_wrap(~cancer_type,
             scales = "free") +
  geom_vline(data = mean_incidence, 
             aes(xintercept = mean_asr_world), 
             color = "salmon", 
             linetype = "dashed", 
             size = 2) +
  labs(x = "Count", 
       y = "Age-standarized incidence rate")


mean_mortality = 
<<<<<<< HEAD
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "Mortality") |>
  group_by(cancer_type) |>
  summarise(mean_asr_world = mean(asr_world, na.rm = TRUE))

globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Mortality") |> 
=======
  globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "mortality") |>
  group_by(cancer_type) |>
  summarise(mean_asr_world = mean(asr_world, na.rm = TRUE))

globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "mortality") |> 
>>>>>>> carlos_branch
  ggplot(aes(asr_world)) + 
  geom_histogram() +
  facet_wrap(~cancer_type,
             scales = "free") +
  geom_vline(data = mean_mortality, 
             aes(xintercept = mean_asr_world), 
             color = "salmon", 
             linetype = "dashed", 
             size = 1) +
  labs(x = "Count", 
       y = "Age-standarized mortality rate")

<<<<<<< HEAD
mean_miratio = 
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "miratio") |>
  group_by(cancer_type) |>
  summarise(median_asr_world = median(asr_world, na.rm = TRUE))

globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "miratio") |>
  filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  ggplot(aes(asr_world)) + 
  geom_histogram() +
  facet_wrap(~cancer_type,
             scales = "free") +
  geom_vline(data = mean_miratio, 
             aes(xintercept = median_asr_world), 
             color = "salmon", 
             linetype = "dashed", 
             size = 1) +
  labs(x = "Count", 
       y = "Mortality to incidence ratio")
=======
>>>>>>> carlos_branch
```

### qqplots by cancer type

```{r}
<<<<<<< HEAD
globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Incidence") |>
=======
globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "incidence") |>
>>>>>>> carlos_branch
  ggplot(aes(sample = asr_world)) + 
  stat_qq() + 
  stat_qq_line() + 
  facet_wrap(~ cancer_type,
             scales = "free") + 
  labs(x = "Theoretical Quantiles", 
       y = "Sample Quantiles") + 
  theme_minimal()

<<<<<<< HEAD
globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Mortality") |>
  ggplot(aes(sample = asr_world)) + 
  stat_qq() + 
  stat_qq_line() + 
  facet_wrap(~ cancer_type,
             scales = "free") + 
  labs(x = "Theoretical Quantiles", 
       y = "Sample Quantiles") + 
  theme_minimal()

globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "miratio") |>
  filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
=======
globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "mortality") |>
>>>>>>> carlos_branch
  ggplot(aes(sample = asr_world)) + 
  stat_qq() + 
  stat_qq_line() + 
  facet_wrap(~ cancer_type,
             scales = "free") + 
  labs(x = "Theoretical Quantiles", 
       y = "Sample Quantiles") + 
  theme_minimal()
```

### Scatterplots epidemiological vs socioeconomic indicator

<<<<<<< HEAD
Epidemiological indicator vs EdI by tumor type

```{r}
p_incidence_v_edi =
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "Incidence") |> 
  ggplot(aes(ed_i, asr_world)) +
  geom_point(alpha = 0.5) +
  labs(y = "Age-standardized incidence rate (per 100,000 women)") +
=======
Incidence vs EdI by tumor type

```{r}
p_incidence_v_edi =
  globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "incidence") |> 
  ggplot(aes(education_and_income, asr_world)) +
  geom_point(alpha = 0.5) +
  labs(y = "Age-standardized incidence rate") +
>>>>>>> carlos_branch
  facet_wrap(~cancer_type, 
             scales = "free") +
  geom_smooth(method = "lm",
              se = F) +
  stat_cor(aes(label = after_stat(rr.label)), 
<<<<<<< HEAD
           color = "cornflowerblue", 
           geom = "label")

ggsave(
  plot = p_incidence_v_edi,
  filename = here("outputs", "p_incidence_v_edi.jpeg"),
  width = 16,
  height = 11,
  dpi = 500,
  units = "in")
```

```{r}
p_mortality_v_edi = 
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "Mortality") |> 
  ggplot(aes(ed_i, asr_world)) +
  geom_point(alpha = 0.5) +
  labs(y = "Age-standardized mortality rate (per 100,000 women)") +
=======
           #color = "cornflowerblue", 
           geom = "label")
```

Mortality vs EdI by tumor type

```{r}
p_mortality_v_edi = 
  globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "mortality") |> 
  ggplot(aes(education_and_income, asr_world)) +
  geom_point(alpha = 0.5) +
  labs(y = "Age-standardized mortality rate") +
>>>>>>> carlos_branch
  facet_wrap(~cancer_type, 
             scales = "free") +
  geom_smooth(method = "lm",
              se = F) +
  stat_cor(aes(label = after_stat(rr.label)), 
<<<<<<< HEAD
           color = "salmon", 
           geom = "label")

ggsave(
  plot = p_mortality_v_edi,
  filename = here("outputs", "p_mortality_v_edi.jpeg"),
  width = 16,
  height = 11,
  dpi = 500,
  units = "in")
```

```{r}
p_miratio_v_edi = 
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "MIR") |>
  filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  ggplot(aes(ed_i, asr_world)) +
  geom_point(alpha = 0.5) +
  labs(y = "Mortality to incidence ratio") +
  facet_wrap(~cancer_type, 
             scales = "free") +
  geom_smooth(method = "lm",
              se = F) +
  stat_cor(aes(label = after_stat(rr.label)), 
           color = "#EFC000FF", 
           geom = "label")

ggsave(
  plot = p_miratio_v_edi,
  filename = here("outputs", "p_miratio_v_edi.jpeg"),
  width = 16,
  height = 11,
  dpi = 500,
  units = "in")
```

Epidemiological indicator vs hdi by tumor type

```{r}
p_incidence_v_hdi = 
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "Incidence") |> 
  ggplot(aes(hdi, asr_world)) +
  geom_point(alpha = 0.5) +
  labs(y = "Age-standarized mortality rate") +
=======
           #color = "cornflowerblue", 
           geom = "label")
```

Incidence vs HDI by tumor type

```{r}
p_incidence_v_hdi = 
  globocan_5 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "incidence") |> 
  ggplot(aes(human_development_index, asr_world)) +
  geom_point() +
  labs(y = "Age-standardized incidence rate",
       x = "Human development index") +
>>>>>>> carlos_branch
  facet_wrap(~cancer_type, 
             scales = "free") +
  geom_smooth(method = "lm",
              se = F) +
  stat_cor(aes(label = after_stat(rr.label)), 
           color = "cornflowerblue", 
           geom = "label")
<<<<<<< HEAD

ggsave(
  plot = p_incidence_v_hdi,
  filename = here("outputs", "p_incidence_v_hdi.jpeg"),
  width = 16,
  height = 11,
  dpi = 500,
  units = "in")
```

```{r}
p_mortality_v_hdi = 
  globocan_8 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "Mortality") |> 
  ggplot(aes(hdi, asr_world)) +
  geom_point() +
  geom_point(alpha = 0.5) +
=======
```

Mortality vs HDI by tumor type

```{r}
globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "mortality") |> 
  ggplot(aes(human_development_index, asr_world)) +
  geom_point(alpha = 0.05) +
>>>>>>> carlos_branch
  labs(y = "Age-standardized mortality rate",
       x = "Human development index") +
  facet_wrap(~cancer_type, 
             scales = "free") +
  geom_smooth(method = "lm",
              se = F) +
  stat_cor(aes(label = after_stat(rr.label)), 
<<<<<<< HEAD
           color = "salmon", 
           geom = "label")

ggsave(
  plot = p_mortality_v_hdi,
  filename = here("outputs", "p_mortality_v_hdi.jpeg"),
  width = 16,
  height = 11,
  dpi = 500,
  units = "in")
```

```{r}
p_miratio_v_hdi = 
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "MIR") |>
  filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  ggplot(aes(hdi, asr_world)) +
  geom_point(alpha = 0.5) +
  labs(y = "Mortality to incidence ratio",
       x = "Human development index") +
  facet_wrap(~cancer_type, 
             scales = "free") +
  geom_smooth(method = "lm",
              se = F) +
  stat_cor(aes(label = after_stat(rr.label)), 
           color = "black", 
           geom = "label")

ggsave(
  plot = p_miratio_v_hdi,
  filename = here("outputs", "p_miratio_v_hdi.jpeg"),
  width = 16,
  height = 11,
  dpi = 500,
  units = "in")
```

Epidemiological indicator vs sdi by tumor type

```{r}
p_incidence_v_sdi = 
  globocan_8 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "Incidence") |> 
  ggplot(aes(sdi, asr_world)) +
=======
           color = "cornflowerblue", 
           geom = "label")
```

Incidence vs SDI by tumor type

```{r}
p_incidence_v_sdi = 
  globocan_5 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "incidence") |> 
  ggplot(aes(sdi_gdb_2021, asr_world)) +
>>>>>>> carlos_branch
  geom_point(alpha = 0.5) +
  labs(y = "Age-standardized incidence rate",
       x = "Sociodemographic index") +
  facet_wrap(~cancer_type, 
             scales = "free") +
  geom_smooth(method = "lm",
              se = F) +
  stat_cor(aes(label = after_stat(rr.label)), 
           color = "cornflowerblue", 
           geom = "label")
<<<<<<< HEAD
# Save figure 
ggsave(
  plot = p_incidence_v_sdi,
  filename = here("outputs", "p_incidence_v_sdi.jpeg"),
  width = 16,
  height = 11,
  dpi = 500,
  units = "in")
```

```{r}
p_motality_v_sdi = 
  globocan_8 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "Mortality") |> 
  ggplot(aes(sdi, asr_world)) +
  geom_point(alpha = 0.5) +
  labs(y = "Age-standardized mortality rate",
=======
```

Mortality vs SDI by tumor type

```{r}
p_incidence_v_sdi = 
  globocan_5 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "incidence") |> 
  ggplot(aes(sdi_gdb_2021, asr_world)) +
  geom_point(alpha = 0.5) +
  labs(y = "Age-standardized incidence rate",
>>>>>>> carlos_branch
       x = "Sociodemographic index") +
  facet_wrap(~cancer_type, 
             scales = "free") +
  geom_smooth(method = "lm",
              se = F) +
  stat_cor(aes(label = after_stat(rr.label)), 
           color = "salmon", 
           geom = "label")
```

<<<<<<< HEAD
```{r}
p_miratio_v_sdi = 
  globocan_8 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "miratio") |>
  filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  ggplot(aes(sdi, asr_world)) +
  geom_point(alpha = 0.5) +
  labs(y = "Mortality to incidence ratio",
       x = "Sociodemographic index") +
  facet_wrap(~cancer_type, 
             scales = "free") +
  geom_smooth(method = "lm",
              se = F) +
  stat_cor(aes(label = after_stat(rr.label)), 
           color = "black", 
           geom = "label")
```

## Plotting results

```{r}
globocan_9 <- globocan_8 |>
  dplyr::filter(indicator != "MIR", cancer_type == "All cancers excl. non-melanoma skin cancer")
```


### Figure 1

```{r}
p_edi <- ggplot2::ggplot(
  data = globocan_9, aes(
    x = ed_i,
    y = asr_world,
    color = indicator,
    shape = indicator
    )
  ) +
  ggplot2::geom_point(aes(fill = indicator), size = 2.5) +
  ggplot2::geom_smooth(
    method = "gam",
    formula = y ~ s(x, bs = "cr", k = -1),
    se = FALSE,
    linewidth = 1) +
  ggplot2::geom_vline(
    xintercept = quantile(globocan_9$ed_i, probs = c(0.25, 0.5, 0.75), na.rm = TRUE),
    linetype = "dashed",
    color = "gray70",
    linewidth = 1
  ) +
  ggrepel::geom_label_repel(aes(label = country_label), show.legend = FALSE) +
  ggplot2::scale_shape_manual(values = c(21, 24)) +
  ggsci::scale_color_igv() +
  ggsci::scale_fill_igv(alpha = 0.1) +
  ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.15)) +
  ggplot2::labs(x = "Education and Income index", 
                y = "") +
  ggplot2::theme_minimal() +
  ggplot2::theme(
    strip.text.x = element_text(hjust = 0),
    legend.position = "bottom",
    legend.title = element_blank(),
    text = element_text(size = 18, color = "black", family = "Syne"),
    axis.line = element_line(colour = "black", linetype = "solid"),
    axis.ticks = element_line(colour = "black", linetype = "solid"),
    panel.grid = element_blank()
  )

p_edi_mir <- globocan_8 |>
  dplyr::filter(indicator == "MIR", cancer_type == "All cancers excl. non-melanoma skin cancer") |>
  ggplot2::ggplot(aes(x = ed_i, y = asr_world)) +
  ggplot2::geom_point(size = 2, shape = 21) +
  ggplot2::geom_smooth(
    method = "gam",
    formula = y ~ s(x, bs = "cr", k = -1),
    se = FALSE,
    linewidth = 1,
    color = "black"
  ) +
  ggplot2::geom_vline(
    xintercept = quantile(globocan_9$ed_i, probs = c(0.25, 0.5, 0.75), na.rm = TRUE),
    linetype = "dashed",
    color = "gray70",
    linewidth = 1
  ) +
  ggrepel::geom_label_repel(aes(label = country_label), show.legend = FALSE) +
  ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
  ggplot2::scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
  ggplot2::labs(x = "Education and Income index",
                y = "") +
  ggplot2::theme_minimal() +
  ggplot2::theme(
    strip.text.x = element_text(hjust = 0),
    text = element_text(size = 18, color = "black", family = "Syne"),
    axis.line = element_line(colour = "black", linetype = "solid"),
    axis.ticks = element_line(colour = "black", linetype = "solid"),
    axis.title = element_text(color = "black"),
    panel.grid = element_blank()
  )

p_hdi <- ggplot2::ggplot(
  data = globocan_9, aes(
    x = hdi,
    y = asr_world,
    color = indicator,
    shape = indicator
    )
  ) +
  ggplot2::geom_point(aes(fill = indicator), size = 2.5) +
  ggplot2::geom_smooth(
    method = "gam",
    formula = y ~ s(x, bs = "cr", k = -1),
    se = FALSE,
    linewidth = 1) +
  ggplot2::geom_vline(
    xintercept = quantile(globocan_9$ed_i, probs = c(0.25, 0.5, 0.75), na.rm = TRUE),
    linetype = "dashed",
    color = "gray70",
    linewidth = 1
  ) +
  ggrepel::geom_label_repel(aes(label = country_label), show.legend = FALSE) +
  ggplot2::scale_shape_manual(values = c(21, 24)) +
  ggsci::scale_color_igv() +
  ggsci::scale_fill_igv(alpha = 0.1) +
  ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.15)) +
  ggplot2::labs(x = "Human Development Index", 
                y = "Age-Standardized Rate (per 100,000)") +
  ggplot2::theme_minimal() +
  ggplot2::theme(
    strip.text.x = element_text(hjust = 0),
    legend.position = "bottom",
    legend.title = element_blank(),
    text = element_text(size = 18, color = "black", family = "Syne"),
    axis.line = element_line(colour = "black", linetype = "solid"),
    axis.ticks = element_line(colour = "black", linetype = "solid"),
    panel.grid = element_blank()
  )


p_hdi_mir <- globocan_8 |>
  dplyr::filter(indicator == "MIR", cancer_type == "All cancers excl. non-melanoma skin cancer") |>
  ggplot2::ggplot(aes(x = hdi, y = asr_world)) +
  ggplot2::geom_point(size = 2, shape = 21) +
  ggplot2::geom_smooth(
    method = "gam",
    formula = y ~ s(x, bs = "cr", k = -1),
    se = FALSE,
    linewidth = 1,
    color = "black"
  ) +
  ggplot2::geom_vline(
    xintercept = quantile(globocan_9$ed_i, probs = c(0.25, 0.5, 0.75), na.rm = TRUE),
    linetype = "dashed",
    color = "gray70",
    linewidth = 1
  ) +
  ggrepel::geom_label_repel(aes(label = country_label), show.legend = FALSE) +
  ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
  ggplot2::scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
  ggplot2::labs(x = "Human Development Index",
                y = "Mortality-to-Incidence Ratio") +
  ggplot2::theme_minimal() +
  ggplot2::theme(
    strip.text.x = element_text(hjust = 0),
    text = element_text(size = 18, color = "black", family = "Syne"),
    axis.line = element_line(colour = "black", linetype = "solid"),
    axis.ticks = element_line(colour = "black", linetype = "solid"),
    axis.title = element_text(color = "black"),
    panel.grid = element_blank()
  )

p_sdi <- ggplot2::ggplot(
  data = globocan_9, aes(
    x = sdi,
    y = asr_world,
    color = indicator,
    shape = indicator
    )
  ) +
  ggplot2::geom_point(aes(fill = indicator), size = 2.5) +
  ggplot2::geom_smooth(
    method = "gam",
    formula = y ~ s(x, bs = "cr", k = -1),
    se = FALSE,
    linewidth = 1) +
  ggplot2::geom_vline(
    xintercept = c(0.45, 0.61, 0.69, 0.81), (na.rm = TRUE),
    linetype = "dashed",
    color = "gray70",
    linewidth = 1
  ) +
  ggrepel::geom_label_repel(aes(label = country_label), show.legend = FALSE) +
  ggplot2::scale_shape_manual(values = c(21, 24)) +
  ggsci::scale_color_igv() +
  ggsci::scale_fill_igv(alpha = 0.1) +
  ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.15)) +
  ggplot2::labs(x = "Sociodemographic Index", 
                y = "") +
  ggplot2::theme_minimal() +
  ggplot2::theme(
    strip.text.x = element_text(hjust = 0),
    legend.position = "bottom",
    legend.title = element_blank(),
    text = element_text(size = 18, color = "black", family = "Syne"),
    axis.line = element_line(colour = "black", linetype = "solid"),
    axis.ticks = element_line(colour = "black", linetype = "solid"),
    panel.grid = element_blank()
  )


p_sdi_mir <- globocan_8 |>
  dplyr::filter(indicator == "MIR", cancer_type == "All cancers excl. non-melanoma skin cancer") |>
  ggplot2::ggplot(aes(x = sdi, y = asr_world)) +
  ggplot2::geom_point(size = 2, shape = 21) +
  ggplot2::geom_smooth(
    method = "gam",
    formula = y ~ s(x, bs = "cr", k = -1),
    se = FALSE,
    linewidth = 1,
    color = "black"
  ) +
  ggplot2::geom_vline(
    xintercept = c(0.45, 0.61, 0.69, 0.81), na.rm = TRUE,
    linetype = "dashed",
    color = "gray70",
    linewidth = 1
  ) +
  ggrepel::geom_label_repel(aes(label = country_label), show.legend = FALSE) +
  ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
  ggplot2::scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
  ggplot2::labs(x = "Sociodemographic Index",
                y = "") +
  ggplot2::theme_minimal() +
  ggplot2::theme(
    strip.text.x = element_text(hjust = 0),
    text = element_text(size = 18, color = "black", family = "Syne"),
    axis.line = element_line(colour = "black", linetype = "solid"),
    axis.ticks = element_line(colour = "black", linetype = "solid"),
    axis.title = element_text(color = "black"),
    panel.grid = element_blank()
  )

# Arrange on one page
figure_1 <- (
  p_edi + p_edi_mir + 
  p_hdi + p_hdi_mir + 
  p_sdi + p_sdi_mir
) +
  plot_layout(ncol = 2, guides = 'collect', axis_titles = 'keep') &
  theme(legend.position = 'bottom')


# Save figure 2 (JPEG)
ggsave(
  plot = figure_1,
  filename = here("outputs", "FIG_1.jpeg"),
  width = 13,
  height = 13,
  dpi = 500,
  units = "in")

```
### Figure 2

```{r}
#My ggplot function for figure 2 (ASR)
my_ggplot <- function(data, ...) {
  ggplot2::ggplot(
    data = data,
    aes(
      x = ed_i,
      y = asr_world,
      color = indicator,
      shape = indicator
      )
    ) +
    ggplot2::geom_point(aes(fill = indicator), size = 2.1) +
    ggplot2::geom_smooth(
      method = "gam",
      formula = y ~ s(x, bs = "cr", k = -1),
      se = FALSE,
      linewidth = 1) +
    ggplot2::geom_vline(
      xintercept = quantile(data$ed_i, probs = c(0.25, 0.5, 0.75), na.rm = TRUE),
      linetype = "dashed",
      color = "gray70",
      linewidth = 1
    ) +
    ggplot2::scale_shape_manual(values = c(21, 24)) +
    ggsci::scale_color_igv() +
    ggsci::scale_fill_igv(alpha = 0.1) +
    ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
    ggplot2::theme_minimal() +
    ggplot2::facet_wrap(
      vars(cancer_type),
      labeller = labeller(cancer_type = label_wrap_gen(50)),
      ncol = 3,
      scales = "free"
    ) +
    ggplot2::theme(
      strip.text.x = element_text(hjust = 0),
      legend.position = "bottom",
      legend.title = element_blank(),
      text = element_text(size = 18, color = "black", family = "Syne"),
      axis.line = element_line(colour = "black", linetype = "solid"),
      axis.ticks = element_line(colour = "black", linetype = "solid"),
      panel.grid = element_blank(),
      plot.title = element_text(size = 24)
      )
}

s_my_ggplot <- function(data, indicator, ...) {
  ggplot2::ggplot(
    data = data,
    aes(
      x = .data[[indicator]],
      y = asr_world,
      color = indicator,
      shape = indicator
    )
  ) +
    ggplot2::geom_point(aes(fill = indicator), size = 2.1) +
    ggplot2::geom_smooth(
      method = "gam",
      formula = y ~ s(x, bs = "cr", k = -1),
      se = FALSE,
      linewidth = 1
    ) +
    ggplot2::geom_vline(
      xintercept = quantile(data[[indicator]], probs = c(0.25, 0.5, 0.75), na.rm = TRUE),
      linetype = "dashed",
      color = "gray70",
      linewidth = 1
    ) +
    ggplot2::scale_shape_manual(values = c(21, 24)) +
    ggsci::scale_color_igv() +
    ggsci::scale_fill_igv(alpha = 0.1) +
    ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
    ggplot2::theme_minimal() +
    ggplot2::facet_wrap(
      vars(cancer_type),
      labeller = labeller(cancer_type = label_wrap_gen(50)),
      ncol = 3,
      scales = "free"
    ) +
    ggplot2::theme(
      strip.text.x = element_text(hjust = 0),
      legend.position = "bottom",
      legend.title = element_blank(),
      text = element_text(size = 18, color = "black", family = "Syne"),
      axis.line = element_line(colour = "black", linetype = "solid"),
      axis.ticks = element_line(colour = "black", linetype = "solid"),
      panel.grid = element_blank(),
      plot.title = element_text(size = 24)
    )
}

my_ggplot_mir <- function(data, ...) {
  ggplot2::ggplot(
    data = data,
    aes(
      x = ed_i,
      y = asr_world
    )
  ) +
    ggplot2::geom_point(size = 2.1, shape = 21, fill = "gray80") +
    ggplot2::geom_smooth(
      method = "gam",
      formula = y ~ s(x, bs = "cr", k = -1),
      se = FALSE,
      linewidth = 1,
      color = "black"
    ) +
    ggplot2::geom_vline(
      xintercept = quantile(data$ed_i, probs = c(0.25, 0.5, 0.75), na.rm = TRUE),
      linetype = "dashed",
      color = "gray70",
      linewidth = 1
    ) +
    ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
    ggplot2::scale_y_continuous(breaks = scales::pretty_breaks()) +
    ggplot2::theme_minimal() +
    ggplot2::facet_wrap(
      vars(cancer_type),
      labeller = labeller(cancer_type = label_wrap_gen(50)),
      ncol = 3,
      scales = "free"
    ) +
    ggplot2::theme(
      strip.text.x = element_text(hjust = 0),
      legend.position = "bottom",
      legend.title = element_blank(),
      text = element_text(size = 18, color = "black", family = "Syne"),
      axis.line = element_line(colour = "black", linetype = "solid"),
      axis.ticks = element_line(colour = "black", linetype = "solid"),
      panel.grid = element_blank(),
      plot.title = element_text(size = 24)
    ) +
    ggplot2::labs(
      x = "Education and Income index",
      y = "Age-Standardized Rate (ASR)",
      title = "ASR vs. EdI by Cancer Type"
    )
}

s_my_ggplot_mir <- function(data, indicator, ...) {
  ggplot2::ggplot(
    data = data,
    aes(
      x = .data[[indicator]],  # Use 'indicator' to specify the x variable dynamically
      y = asr_world
    )
  ) +
    ggplot2::geom_point(size = 2.1, shape = 21, fill = "gray80") +
    ggplot2::geom_smooth(
      method = "gam",
      formula = y ~ s(x, bs = "cr", k = -1),
      se = FALSE,
      linewidth = 1,
      color = "black"
    ) +
    ggplot2::geom_vline(
      xintercept = quantile(data[[indicator]], probs = c(0.25, 0.5, 0.75), na.rm = TRUE),
      linetype = "dashed",
      color = "gray70",
      linewidth = 1
    ) +
    ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
    ggplot2::scale_y_continuous(breaks = scales::pretty_breaks()) +
    ggplot2::theme_minimal() +
    ggplot2::facet_wrap(
      vars(cancer_type),
      labeller = labeller(cancer_type = label_wrap_gen(50)),
      ncol = 3,
      scales = "free"
    ) +
    ggplot2::theme(
      strip.text.x = element_text(hjust = 0),
      legend.position = "bottom",
      legend.title = element_blank(),
      text = element_text(size = 18, color = "black", family = "Syne"),
      axis.line = element_line(colour = "black", linetype = "solid"),
      axis.ticks = element_line(colour = "black", linetype = "solid"),
      panel.grid = element_blank(),
      plot.title = element_text(size = 24)
    ) +
    ggplot2::labs(
      x = "Education and Income Index",
      y = "Mortality to Incidence Ratio (MIR)",
      title = element_blank()
    )
}


# Group A
figure_a1_data <- globocan_8 |>
  dplyr::filter(
    indicator != "MIR",
    cancer_type %in% c(
      "Breast",
      "Prostate",
      "Colorectum"
      )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Breast",
      "Prostate",
      "Colorectum"
      )
  ))

figure_a1_mir_data <- globocan_8 |>
  dplyr::filter(
    indicator == "MIR",
    cancer_type %in% c(
      "Breast",
      "Prostate",
      "Colorectum"
      )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Breast",
      "Prostate",
      "Colorectum"
      )
  ))

figure_a2_data <- globocan_8 |>
  dplyr::filter(
    indicator != "MIR",
    cancer_type %in% c(
      "Melanoma of skin",
      "Corpus uteri",
      "Bladder"
    )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Melanoma of skin",
      "Corpus uteri",
      "Bladder"
    )
  ))

figure_a2_mir_data <- globocan_8 |>
  dplyr::filter(
    indicator == "MIR",
    cancer_type %in% c(
      "Melanoma of skin",
      "Corpus uteri",
      "Bladder"
    )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Melanoma of skin",
      "Corpus uteri",
      "Bladder"
    )
  ))


figure_a1 <- my_ggplot(figure_a1_data) +
  ggplot2::labs(title = "Group A") +
  ggplot2::theme(axis.title = element_blank())

figure_a1_mir <- my_ggplot_mir(figure_a1_mir_data) +
  ggplot2::labs(title = element_blank()) +
  ggplot2::theme(axis.title = element_blank())

figure_a2 <- my_ggplot(figure_a1_data) +
  ggplot2::labs(title = "Group A") +
  ggplot2::theme(axis.title = element_blank())

figure_a2_mir <- my_ggplot_mir(figure_a2_mir_data) +
  ggplot2::labs(title = element_blank()) +
  ggplot2::theme(axis.title = element_blank())

# #Group A - Supplementary
 
s_figure_a_data <- globocan_8 |>
  dplyr::filter(
    indicator != "MIR",
    cancer_type %in% c(
      "Breast", "Prostate", "Colorectum", "Melanoma of skin",
      "Colon", "Corpus uteri", "Bladder", "Non-Hodgkin lymphoma",
      "Rectum", "Kidney", "Thyroid", "Leukaemia", "Testis",
      "Multiple myeloma", "Hodgkin lymphoma", "Oropharynx",
      "Vulva", "Anus", "Lip, oral cavity"
      )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Breast", "Prostate", "Colorectum", "Melanoma of skin",
      "Colon", "Corpus uteri", "Bladder", "Non-Hodgkin lymphoma",
      "Rectum", "Kidney", "Thyroid", "Leukaemia", "Testis",
      "Multiple myeloma", "Hodgkin lymphoma", "Oropharynx",
      "Vulva", "Anus", "Lip, oral cavity"
      )
  ))

s_figure_a_mir_data <- globocan_8 |>
  dplyr::filter(
    indicator == "MIR",
    cancer_type %in% c(
      "Breast", "Prostate", "Colorectum", "Melanoma of skin",
      "Colon", "Corpus uteri", "Bladder", "Non-Hodgkin lymphoma",
      "Rectum", "Kidney", "Thyroid", "Leukaemia", "Testis",
      "Multiple myeloma", "Hodgkin lymphoma", "Oropharynx",
      "Vulva", "Anus", "Lip, oral cavity"
      )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Breast", "Prostate", "Colorectum", "Melanoma of skin",
      "Colon", "Corpus uteri", "Bladder", "Non-Hodgkin lymphoma",
      "Rectum", "Kidney", "Thyroid", "Leukaemia", "Testis",
      "Multiple myeloma", "Hodgkin lymphoma", "Oropharynx",
      "Vulva", "Anus", "Lip, oral cavity"
      )
  ))


s_figure_a <- s_my_ggplot(s_figure_a_data, indicator = "ed_i") +
  ggplot2::labs(title = "Group A") +
  ggplot2::theme(axis.title = element_blank())

s_figure_a_mir <- s_my_ggplot_mir(s_figure_a_mir_data, indicator = "ed_i") +
  ggplot2::labs(title = element_blank()) +
  ggplot2::theme(axis.title = element_blank())

# Group B
figure_b_data <- globocan_8 |>
  dplyr::filter(
    indicator != "MIR",
    cancer_type %in% c(
      "Trachea, bronchus and lung",
      "Pancreas",
      "Brain, nervous system"
    )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Trachea, bronchus and lung",
      "Pancreas",
      "Brain, nervous system"
    )
  ))

figure_b <- my_ggplot(figure_b_data) +
  ggplot2::labs(y = "Age-Standardized Rate (per 100,000)", title = "Group B") +
  ggplot2::theme(axis.title.y = element_text(hjust = 0), axis.title.x = element_blank())

# Group b MIR
figure_b_mir_data <- globocan_8 |>
  dplyr::filter(
    indicator == "MIR",
    cancer_type %in% c(
      "Trachea, bronchus and lung",
      "Pancreas",
      "Brain, nervous system"
    )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Trachea, bronchus and lung",
      "Pancreas",
      "Brain, nervous system"
    )
  ))


figure_b_mir <- my_ggplot_mir(figure_b_mir_data) +
  ggplot2::labs(title = element_blank()) +
  ggplot2::theme(axis.title = element_blank())

# #Group B - Supplementary
# 
# s_figure_b_data <- globocan_8 |>
#   dplyr::filter(
#     indicator != "MIR",
#     cancer_type %in% c(
#       "Trachea, bronchus and lung",
#       "Pancreas",
#       "Brain, nervous system",
#       "Mesothelioma"
#       )
#   ) |>
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Trachea, bronchus and lung",
#       "Pancreas",
#       "Brain, nervous system",
#       "Mesothelioma"
#       )
#   ))
# 
# s_figure_b_mir_data <- globocan_8 |>
#   dplyr::filter(
#     indicator == "MIR",
#     cancer_type %in% c(
#       "Trachea, bronchus and lung",
#       "Pancreas",
#       "Brain, nervous system",
#       "Mesothelioma"
#       )
#   ) |>
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Trachea, bronchus and lung",
#       "Pancreas",
#       "Brain, nervous system",
#       "Mesothelioma"
#       )
#   ))
# 
# 
# s_figure_b <- my_ggplot(s_figure_b_data) +
#   ggplot2::labs(title = "Group B") +
#   ggplot2::theme(axis.title = element_blank())
# 
# s_figure_b_mir <- my_ggplot_mir(s_figure_b_mir_data) +
#   ggplot2::labs(title = element_blank()) +
#   ggplot2::theme(axis.title = element_blank())

###################

# Group c
figure_c_data <- globocan_8 |>
  dplyr::filter(
    indicator != "MIR",
    cancer_type %in% c(
      "Cervix uteri",
      "Stomach",
      "Liver"
    )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Cervix uteri",
      "Stomach",
      "Liver"
    )
  ))

figure_c <- my_ggplot(figure_c_data) +
  ggplot2::labs(x = element_blank(), title = "Group C") +
  ggplot2::theme(axis.title.y = element_blank())

# Group C MIR
figure_c_mir_data <- globocan_8 |>
  dplyr::filter(
    indicator == "MIR",
    cancer_type %in% c(
      "Cervix uteri",
      "Stomach",
      "Liver"
    )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Cervix uteri",
      "Stomach",
      "Liver"
    )
  ))

figure_c_mir <- my_ggplot_mir(figure_c_mir_data) +
  ggplot2::labs(x = "Education and Income index",
                title = element_blank()) +
  ggplot2::theme(axis.title.y = element_blank())

# #Group C - Supplementary
# 
# s_figure_c_data <- globocan_8 |>
#   dplyr::filter(
#     indicator != "MIR",
#     cancer_type %in% c(
#       "Stomach", "Cervix uteri", 
#       "Oesophagus", "Larynx", 
#       "Vagina", "Kaposi sarcoma"
#       )
#   ) |>
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Stomach", "Cervix uteri", 
#       "Oesophagus", "Larynx", 
#       "Vagina", "Kaposi sarcoma"
#       )
#   ))
# 
# s_figure_c_mir_data <- globocan_8 |>
#   dplyr::filter(
#     indicator == "MIR",
#     cancer_type %in% c(
#       "Stomach", "Cervix uteri", 
#       "Oesophagus", "Larynx", 
#       "Vagina", "Kaposi sarcoma"
#       )
#   ) |>
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Stomach", "Cervix uteri", 
#       "Oesophagus", "Larynx", 
#       "Vagina", "Kaposi sarcoma"
#       )
#   ))
# 
# 
# s_figure_c <- my_ggplot(s_figure_c_data) +
#   ggplot2::labs(title = "Group C") +
#   ggplot2::theme(axis.title = element_blank())
# 
# s_figure_c_mir <- my_ggplot_mir(s_figure_c_mir_data) +
#   ggplot2::labs(title = element_blank()) +
#   ggplot2::theme(axis.title = element_blank())
# 
# # Group D - Supplementary
# 
# s_figure_d_data <- globocan_8 |>
#   dplyr::filter(
#     indicator != "MIR",
#     cancer_type %in% c(
#       "Ovary", "Penis", "Salivary glands", 
#       "Hypopharynx", "Gallbladder", 
#       "Liver and intrahepatic bile ducts", 
#       "Nasopharynx"
#       )
#   ) |>
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Ovary", "Penis", "Salivary glands", 
#       "Hypopharynx", "Gallbladder", 
#       "Liver and intrahepatic bile ducts", 
#       "Nasopharynx"
#       )
#   ))
# 
# s_figure_d_mir_data <- globocan_8 |>
#   dplyr::filter(
#     indicator == "MIR",
#     cancer_type %in% c(
#       "Ovary", "Penis", "Salivary glands", 
#       "Hypopharynx", "Gallbladder", 
#       "Liver and intrahepatic bile ducts", 
#       "Nasopharynx"
#       )
#   ) |>
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Ovary", "Penis", "Salivary glands", 
#       "Hypopharynx", "Gallbladder", 
#       "Liver and intrahepatic bile ducts", 
#       "Nasopharynx"
#       )
#   ))
# 
# 
# s_figure_d <- my_ggplot(s_figure_d_data) +
#   ggplot2::labs(title = "Group D") +
#   ggplot2::theme(axis.title = element_blank())
# 
# s_figure_d_mir <- my_ggplot_mir(s_figure_d_mir_data) +
#   ggplot2::labs(title = element_blank()) +
#   ggplot2::theme(axis.title = element_blank())

# Part 2

my_ggplot_sdi <- function(data, ...) {
  ggplot2::ggplot(
    data = data,
    aes(
      x = sdi,
      y = asr_world,
      color = indicator,
      shape = indicator
      )
    ) +
    ggplot2::geom_point(aes(fill = indicator), size = 2.1) +
    ggplot2::geom_smooth(
      method = "gam",
      formula = y ~ s(x, bs = "cr", k = -1),
      se = FALSE,
      linewidth = 1) +
    ggplot2::geom_vline(
      xintercept = c(0.45, 0.61, 0.69, 0.81), na.rm = TRUE,
      linetype = "dashed",
      color = "gray70",
      linewidth = 1
    ) +
    ggplot2::scale_shape_manual(values = c(21, 24)) +
    ggsci::scale_color_igv() +
    ggsci::scale_fill_igv(alpha = 0.1) +
    ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
    ggplot2::theme_minimal() +
    ggplot2::facet_wrap(
      vars(cancer_type),
      labeller = labeller(cancer_type = label_wrap_gen(50)),
      ncol = 3,
      scales = "free"
    ) +
    ggplot2::theme(
      strip.text.x = element_text(hjust = 0),
      legend.position = "bottom",
      legend.title = element_blank(),
      text = element_text(size = 18, color = "black", family = "Syne"),
      axis.line = element_line(colour = "black", linetype = "solid"),
      axis.ticks = element_line(colour = "black", linetype = "solid"),
      panel.grid = element_blank(),
      plot.title = element_text(size = 24)
      )
}

my_ggplot_mir_sdi <- function(data, ...) {
  ggplot2::ggplot(
    data = data,
    aes(
      x = sdi,
      y = asr_world
    )
  ) +
    ggplot2::geom_point(size = 2.1, shape = 21, fill = "gray80") +
    ggplot2::geom_smooth(
      method = "gam",
      formula = y ~ s(x, bs = "cr", k = -1),
      se = FALSE,
      linewidth = 1,
      color = "black"
    ) +
    ggplot2::geom_vline(
      xintercept = c(0.45, 0.61, 0.69, 0.81), na.rm = TRUE,
      linetype = "dashed",
      color = "gray70",
      linewidth = 1
    ) +
    ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
    ggplot2::scale_y_continuous(breaks = scales::pretty_breaks()) +
    ggplot2::theme_minimal() +
    ggplot2::facet_wrap(
      vars(cancer_type),
      labeller = labeller(cancer_type = label_wrap_gen(50)),
      ncol = 3,
      scales = "free"
    ) +
    ggplot2::theme(
      strip.text.x = element_text(hjust = 0),
      legend.position = "bottom",
      legend.title = element_blank(),
      text = element_text(size = 18, color = "black", family = "Syne"),
      axis.line = element_line(colour = "black", linetype = "solid"),
      axis.ticks = element_line(colour = "black", linetype = "solid"),
      panel.grid = element_blank(),
      plot.title = element_text(size = 24)
    ) +
    ggplot2::labs(
      x = "Sociodemographic index",
      y = "Age-Standardized Rate (ASR)",
      title = element_blank()
    )
}

# Group A
figure_a1_sdi_data <- globocan_8 |>
  dplyr::filter(
    indicator != "MIR",
    cancer_type %in% c(
      "Breast",
      "Prostate",
      "Colorectum"
      )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Breast",
      "Prostate",
      "Colorectum"
      )
  ))

figure_a1_sdi_mir_data <- globocan_8 |>
  dplyr::filter(
    indicator == "MIR",
    cancer_type %in% c(
      "Breast",
      "Prostate",
      "Colorectum"
      )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Breast",
      "Prostate",
      "Colorectum"
      )
  ))

figure_a2_sdi_data <- globocan_8 |>
  dplyr::filter(
    indicator != "MIR",
    cancer_type %in% c(
      "Melanoma of skin",
      "Corpus uteri",
      "Bladder"
    )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Melanoma of skin",
      "Corpus uteri",
      "Bladder"
    )
  ))

figure_a2_mir_sdi_data <- globocan_8 |>
  dplyr::filter(
    indicator == "MIR",
    cancer_type %in% c(
      "Melanoma of skin",
      "Corpus uteri",
      "Bladder"
    )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Melanoma of skin",
      "Corpus uteri",
      "Bladder"
    )
  ))


figure_a1_sdi <- my_ggplot_sdi(figure_a1_sdi_data) +
  ggplot2::labs(title = "Group A") +
  ggplot2::theme(axis.title = element_blank()) 

figure_a1_mir_sdi <- my_ggplot_mir_sdi(figure_a1_sdi_mir_data) +
  ggplot2::labs(title = element_blank()) +
  ggplot2::theme(axis.title = element_blank())

figure_a2_sdi <- my_ggplot_sdi(figure_a2_sdi_data) +
  ggplot2::labs(title = element_blank()) +
  ggplot2::theme(axis.title = element_blank())

figure_a2_mir_sdi <- my_ggplot_mir_sdi(figure_a2_mir_sdi_data) +
  ggplot2::labs(title = element_blank()) +
  ggplot2::theme(axis.title = element_blank())

# Group B
figure_b_sdi_data <- globocan_8 |>
  dplyr::filter(
    indicator != "MIR",
    cancer_type %in% c(
      "Trachea, bronchus and lung",
      "Pancreas",
      "Brain, nervous system"
    )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Trachea, bronchus and lung",
      "Pancreas",
      "Brain, nervous system"
    )
  ))

figure_b_sdi <- my_ggplot_sdi(figure_b_sdi_data) +
  ggplot2::labs(y = "Age-Standardized Rate (per 100,000)", title = "Group B") +
  ggplot2::theme(axis.title.y = element_text(hjust = 0), axis.title.x = element_blank())

# Group b MIR
figure_b_mir_sdi_data <- globocan_8 |>
  dplyr::filter(
    indicator == "MIR",
    cancer_type %in% c(
      "Trachea, bronchus and lung",
      "Pancreas",
      "Brain, nervous system"
    )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Trachea, bronchus and lung",
      "Pancreas",
      "Brain, nervous system"
    )
  ))


figure_b_mir_sdi <- my_ggplot_mir_sdi(figure_b_mir_sdi_data) +
  ggplot2::labs(title = element_blank()) +
  ggplot2::theme(axis.title = element_blank())

# Group c
figure_c_sdi_data <- globocan_8 |>
  dplyr::filter(
    indicator != "MIR",
    cancer_type %in% c(
      "Cervix uteri",
      "Stomach",
      "Liver"
    )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Cervix uteri",
      "Stomach",
      "Liver"
    )
  ))

figure_c_sdi <- my_ggplot_sdi(figure_c_sdi_data) +
  ggplot2::labs(x = element_blank(), title = "Group C") +
  ggplot2::theme(axis.title.y = element_blank())

# Group C MIR
figure_c_mir_sdi_data <- globocan_8 |>
  dplyr::filter(
    indicator == "MIR",
    cancer_type %in% c(
      "Cervix uteri",
      "Stomach",
      "Liver"
    )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Cervix uteri",
      "Stomach",
      "Liver"
    )
  ))

figure_c_mir_sdi <- my_ggplot_mir_sdi(figure_c_mir_sdi_data) +
  ggplot2::labs(x = "Sociodemographic index", 
                title = element_blank()) +
  ggplot2::theme(axis.title.y = element_blank())

# Arrange on one page

figure_2.1 <- (
  figure_a1 / figure_a1_mir /
  figure_a2 / figure_a2_mir/
  figure_b / figure_b_mir /
  figure_c / figure_c_mir
) +
  plot_layout(ncol = 1, guides = 'collect', axis_titles = 'collect') &
  theme(legend.position = 'bottom')

figure_2.2 <- (
  figure_a1_sdi / figure_a1_mir_sdi /
  figure_a2_sdi / figure_a2_mir_sdi /
  figure_b_sdi / figure_b_mir_sdi /
  figure_c_sdi / figure_c_mir_sdi
) +
  plot_layout(ncol = 1, guides = 'collect', axis_titles = 'collect') &
  theme(legend.position = 'bottom')

figure_2 <- (figure_2.1 | figure_2.2) +
  plot_layout(ncol = 2, guides = 'collect') &
  theme(legend.position = 'bottom')


ggsave(
  plot = figure_2,
  filename = here("outputs", "figure_2.jpg"),
  width = 20,
  height = 26,
  dpi = 500,
  units = "in")
```


```{r}
# globocan_10 <- globocan_8 |>
#   dplyr::filter(
#     !cancer_type %in% c(
#       "All cancers excl. non-melanoma skin cancer",
#       "Colon",
#       "Rectum",
#       "Non-melanoma skin cancer")
#   ) |>
#   dplyr::mutate(
#     cancer_type = case_when(
#       cancer_type %in% c(
#         "Gallbladder",
#         "Salivary glands",
#         "Mesothelioma",
#         "Penis",
#         "Kaposi sarcoma") ~ "Others/Unspec",
#       cancer_type %in% c(
#         "Hypopharynx",
#         "Nasopharynx",
#         "Oropharynx") ~ "Other pharynx", 
#       .default = as.character(cancer_type)
#     )
#   ) |> 
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Breast",
#       "Prostate",
#       "Colorectum",
#       "Melanoma of skin",
#       "Corpus uteri",
#       "Bladder",
#       "Non-Hodgkin lymphoma",
#       "Kidney",
#       "Thyroid",
#       "Leukaemia",
#       "Ovary",
#       "Testis",
#       "Multiple myeloma",
#       "Hodgkin lymphoma",
#       "Vulva",
#       "Anus",
#       "Trachea, bronchus and lung", 
#       "Pancreas",
#       "Brain, nervous system",
#       "Cervix uteri",
#       "Stomach",
#       "Liver",
#       "Larynx",
#       "Vagina",
#       "Lip, oral cavity",
#       "Oesophagus",
#       "Other pharynx",
#       "Others/Unspec"
#     )
#   ),
#   group = case_when(
#     cancer_type %in% c(
#       "Breast",
#       "Prostate",
#       "Colorectum",
#       "Melanoma of skin",
#       "Corpus uteri",
#       "Bladder",
#       "Non-Hodgkin lymphoma",
#       "Kidney",
#       "Thyroid",
#       "Leukaemia",
#       "Ovary",
#       "Testis",
#       "Multiple myeloma",
#       "Hodgkin lymphoma",
#       "Vulva",
#       "Anus") ~ "Group A",
#     cancer_type %in% c(
#       "Trachea, bronchus and lung", 
#       "Pancreas",
#       "Brain, nervous system") ~ "Group B",
#     cancer_type %in% c(
#       "Cervix uteri",
#       "Stomach",
#       "Liver",
#       "Larynx",
#       "Vagina") ~ "Group C",
#     cancer_type %in% c(
#       "Lip, oral cavity",
#       "Oesophagus",
#       "Other pharynx",
#       "Others/Unspec") ~ "Group D",
#     .default = as.character(cancer_type)
#   ))
# 
# # Define the number of unique cancer types
# colourCount <- length(unique(globocan_10$cancer_type))
# 
# # Define the four palettes
# palette1 <- colorRampPalette(brewer.pal(4, "Reds"))(16)
# palette2 <- colorRampPalette(brewer.pal(3, "Purples"))(3)
# palette3 <- colorRampPalette(brewer.pal(6, "Greens"))(5)
# palette4 <- colorRampPalette(brewer.pal(3, "Blues"))(4)
# palette5 <- colorRampPalette(brewer.pal(3, "Greys"))(1)
# 
# # Combine the palettes
# combinedPalette <- c(palette1, palette2, palette3, palette4, palette5)
# 
# # Figure 3
# figure_3 <- ggplot2::ggplot(
#   data = globocan_10, aes(
#     x = ed_i,
#     y = asr_world,
#     fill = cancer_type
#     )
#   ) + 
#   ggplot2::geom_area(color = "gray80", size = 0.25) +
#   ggplot2::scale_fill_manual(values = combinedPalette) +
#   ggplot2::geom_vline(
#     xintercept = quantile(
#       globocan_10$ed_i,
#       probs = c(0.25, 0.5, 0.75),
#       na.rm = TRUE
#     ),
#     linetype = "dashed",
#     color = "gray80",
#     linewidth = 0.5
#   ) +
#   ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.15)) +
#   ggplot2::labs(
#     x = "Education and Income index (EdI)",
#     y = "Age-Standardized Rate (per 100,000)",
#     fill = "Cancer type") +
#   ggplot2::theme_minimal() +
#   ggplot2::theme(
#     plot.margin = unit(c(1, 1, 1, 1), "cm"), 
#     legend.position = "right",
#     text = element_text(size = 14, color = "black", family = "Syne"),
#     axis.ticks = element_line(colour = "black", linetype = "solid"),
#     panel.grid = element_blank()
#   ) +
#   ggplot2::guides(fill = guide_legend(ncol = 1)) +
#   ggplot2::facet_wrap(
#     vars(indicator),
#     ncol = 1,
#     scales = "free",
#     strip.position = "left"
#   ) +
#   ggplot2::theme(strip.placement = "outside")
# 
# # Save figure 3 (JPEG)
# ggsave(
#   plot = figure_3,
#   filename = here("outputs", "FIG_3.jpeg"),
#   width = 14,
#   height = 8,
#   dpi = 500,
#   units = "in")
# 
# # ggplot2::stat_smooth(
# #   geom = "area",
# #   method = 'gam',
# #   formula = y ~ s(x, bs = "cr", k = -1),
# #   se = FALSE,
# #   color = "gray80"
# # )
# 
# # Figure S1
# figure_S1 <- ggplot2::ggplot(
#   data = globocan_9, aes(
#     x = hdi,
#     y = asr_world,
#     color = indicator
#   )
# ) +
#   ggplot2::geom_point(aes(fill = indicator), size = 2.5, shape = 21) +
#   ggplot2::geom_smooth(method = "gam",
#                        formula = y ~ s(x, bs = "cr", k = -1),
#                        se = FALSE) +
#   ggplot2::geom_vline(
#     xintercept = quantile(globocan_9$hdi, probs = c(0.25, 0.5, 0.75), na.rm = TRUE),
#     linetype = "dashed",
#     color = "gray70",
#     linewidth = 1
#   ) +
#   ggrepel::geom_label_repel(aes(label = country_label), show.legend = FALSE) +
#   ggsci::scale_color_igv() +
#   ggsci::scale_fill_igv(alpha = 0.1) +
#   ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.15)) +
#   ggplot2::guides(fill = "none") +
#   ggplot2::labs(x = "Human Development Index (HDI)", y = "Age-Standardized Rate (per 100,000)") +
#   ggplot2::theme_minimal() +
#   ggplot2::facet_wrap(
#     vars(cancer_type),
#     labeller = labeller(cancer_type = label_wrap_gen(50)),
#     ncol = 3,
#     scales = "free"
#   ) +
#   ggplot2::theme(
#     strip.text.x = element_text(hjust = 0),
#     legend.position = "bottom",
#     legend.title = element_blank(),
#     text = element_text(size = 18, color = "black", family = "Syne"),
#     axis.line = element_line(colour = "black", linetype = "solid"),
#     axis.ticks = element_line(colour = "black", linetype = "solid"),
#     panel.grid = element_blank()
#   )
# 
# # Save figure S1 (JPEG)
# ggsave(
#   plot = figure_S1,
#   filename = here("outputs", "FIG_S1.jpeg"),
#   width = 12,
#   height = 8,
#   dpi = 500,
#   units = "in")
# 
# # My ggplot function for figure S2
# my_ggplot <- function(data, ...) {
#   ggplot2::ggplot(
#     data = data,
#     aes(
#       x = hdi,
#       y = asr_world,
#       color = indicator,
#       shape = indicator
#     )
#   ) +
#     ggplot2::geom_point(aes(fill = indicator), size = 2.5) +
#     ggplot2::geom_smooth(method = "gam",
#                          formula = y ~ s(x, bs = "cr", k = -1),
#                          se = FALSE) +
#     ggplot2::geom_vline(
#       xintercept = quantile(data$hdi, probs = c(0.25, 0.5, 0.75), na.rm = TRUE),
#       linetype = "dashed",
#       color = "gray70",
#       linewidth = 1
#     ) +
#     ggplot2::scale_shape_manual(values = c(21, 24)) +
#     ggsci::scale_color_igv(guide = guide_legend(override.aes = list(
#       linetype = c(0, 0),
#       shape = c(1, 1),
#       size = c(4, 4)
#     ))) +
#     ggsci::scale_fill_igv(alpha = 0.1) +
#     ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.15)) +
#     ggplot2::guides(fill = "none") +
#     ggplot2::theme_minimal() +
#     ggplot2::facet_wrap(
#       vars(cancer_type),
#       labeller = labeller(cancer_type = label_wrap_gen(50)),
#       ncol = 3,
#       scales = "free"
#     ) +
#     ggplot2::theme(
#       strip.text.x = element_text(hjust = 0),
#       legend.position = "bottom",
#       legend.title = element_blank(),
#       text = element_text(size = 22, color = "black", family = "Syne"),
#       axis.line = element_line(colour = "black", linetype = "solid"),
#       axis.ticks = element_line(colour = "black", linetype = "solid"),
#       panel.grid = element_blank(),
#       plot.title = element_text(size = 24)
#     )
# }
# 
# # Figure S2A
# figure_S2A_data <- globocan_8 |>
#   dplyr::filter(
#     cancer_type %in% c(
#       "Breast",
#       "Prostate",
#       "Colorectum",
#       "Melanoma of skin",
#       "Corpus uteri",
#       "Bladder"
#     )
#   ) |>
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Breast",
#       "Prostate",
#       "Colorectum",
#       "Melanoma of skin",
#       "Corpus uteri",
#       "Bladder"
#     )
#   ))
# 
# figure_S2A <- my_ggplot(figure_S2A_data) +
#   ggplot2::labs(title = "Group A") + 
#   ggplot2::theme(axis.title = element_blank())
# 
# # Figure S2B
# figure_S2B_data <- globocan_8 |>
#   dplyr::filter(
#     cancer_type %in% c(
#       "Trachea, bronchus and lung", 
#       "Pancreas",
#       "Brain, nervous system"
#     )
#   ) |>
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Trachea, bronchus and lung", 
#       "Pancreas",
#       "Brain, nervous system"
#     )
#   ))
# 
# figure_S2B <- my_ggplot(figure_S2B_data) +
#   ggplot2::labs(y = "Age-Standardized Rate (per 100,000)", title = "Group B") +
#   ggplot2::theme(axis.title.y = element_text(hjust = 0), axis.title.x = element_blank())
# 
# # Figure S2C
# figure_S2C_data <- globocan_8 |>
#   dplyr::filter(
#     cancer_type %in% c(
#       "Cervix uteri",
#       "Stomach",
#       "Liver"
#     )
#   ) |>
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Cervix uteri",
#       "Stomach",
#       "Liver"
#     )
#   ))
# 
# figure_S2C <- my_ggplot(figure_S2C_data) +
#   ggplot2::labs(x = "Human Development Index (HDI)", title = "Group C") + 
#   ggplot2::theme(axis.title.y = element_blank())
# 
# # Arrange on one page
# figure_S2 <-
#   figure_S2A + (figure_S2B + figure_S2C + plot_layout(ncol = 1)) +
#   plot_layout(ncol = 1,
#               guides = 'collect',
#               axis_titles = 'collect') &
#   theme(legend.position = 'bottom')
# 
# # Save figure S2 (PNG)
# ggsave(
#   plot = figure_S2,
#   filename = here("outputs", "FIG_S2.png"),
#   width = 20,
#   height = 15,
#   dpi = 500,
#   units = "in")
# 
# Figure S3
# figure_S3 <- ggplot2::ggplot(
#   data = globocan_9, aes(
#     x = sdi,
#     y = asr_world,
#     color = indicator
#   )
# ) +
#   ggplot2::geom_point(aes(fill = indicator), size = 2.5, shape = 21) +
#   ggplot2::geom_smooth(method = "gam",
#                        formula = y ~ s(x, bs = "cr", k = -1),
#                        se = FALSE) +
#   ggplot2::geom_vline(
#     xintercept = quantile(globocan_9$sdi, probs = c(0.25, 0.5, 0.75), na.rm = TRUE),
#     linetype = "dashed",
#     color = "gray70",
#     linewidth = 1
#   ) +
#   ggrepel::geom_label_repel(aes(label = country_label), show.legend = FALSE) +
#   ggsci::scale_color_igv() +
#   ggsci::scale_fill_igv(alpha = 0.1) +
#   ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.15)) +
#   ggplot2::guides(fill = "none") +
#   ggplot2::labs(x = "Socio-demographic Index (SDI)", y = "Age-Standardized Rate (per 100,000)") +
#   ggplot2::theme_minimal() +
#   ggplot2::facet_wrap(
#     vars(cancer_type),
#     labeller = labeller(cancer_type = label_wrap_gen(50)),
#     ncol = 3,
#     scales = "free"
#   ) +
#   ggplot2::theme(
#     strip.text.x = element_text(hjust = 0),
#     legend.position = "bottom",
#     legend.title = element_blank(),
#     text = element_text(size = 18, color = "black", family = "Syne"),
#     axis.line = element_line(colour = "black", linetype = "solid"),
#     axis.ticks = element_line(colour = "black", linetype = "solid"),
#     panel.grid = element_blank()
#   )
# 
# # Save figure S3 (JPEG)
# ggsave(
#   plot = figure_S3,
#   filename = here("outputs", "FIG_S3.jpeg"),
#   width = 12,
#   height = 8,
#   dpi = 500,
#   units = "in")
# 
# # My ggplot function for figure S4
# my_ggplot <- function(data, ...) {
#   ggplot2::ggplot(
#     data = data,
#     aes(
#       x = sdi,
#       y = asr_world,
#       color = indicator,
#       shape = indicator
#     )
#   ) +
#     ggplot2::geom_point(aes(fill = indicator), size = 2.5) +
#     ggplot2::geom_smooth(method = "gam",
#                          formula = y ~ s(x, bs = "cr", k = -1),
#                          se = FALSE) +
#     ggplot2::geom_vline(
#       xintercept = quantile(data$sdi, probs = c(0.25, 0.5, 0.75), na.rm = TRUE),
#       linetype = "dashed",
#       color = "gray70",
#       linewidth = 1
#     ) +
#     ggplot2::scale_shape_manual(values = c(21, 24)) +
#     ggsci::scale_color_igv(guide = guide_legend(override.aes = list(
#       linetype = c(0, 0),
#       shape = c(1, 1),
#       size = c(4, 4)
#     ))) +
#     ggsci::scale_fill_igv(alpha = 0.1) +
#     ggplot2::scale_x_continuous(breaks = seq(0, 1, by = 0.15)) +
#     ggplot2::guides(fill = "none") +
#     ggplot2::theme_minimal() +
#     ggplot2::facet_wrap(
#       vars(cancer_type),
#       labeller = labeller(cancer_type = label_wrap_gen(50)),
#       ncol = 3,
#       scales = "free"
#     ) +
#     ggplot2::theme(
#       strip.text.x = element_text(hjust = 0),
#       legend.position = "bottom",
#       legend.title = element_blank(),
#       text = element_text(size = 22, color = "black", family = "Syne"),
#       axis.line = element_line(colour = "black", linetype = "solid"),
#       axis.ticks = element_line(colour = "black", linetype = "solid"),
#       panel.grid = element_blank(),
#       plot.title = element_text(size = 24)
#     )
# }
# 
# # Figure S4A
# figure_S4A_data <- globocan_8 |>
#   dplyr::filter(
#     cancer_type %in% c(
#       "Breast",
#       "Prostate",
#       "Colorectum",
#       "Melanoma of skin",
#       "Corpus uteri",
#       "Bladder"
#     )
#   ) |>
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Breast",
#       "Prostate",
#       "Colorectum",
#       "Melanoma of skin",
#       "Corpus uteri",
#       "Bladder"
#     )
#   ))
# 
# figure_S4A <- my_ggplot(figure_S4A_data) +
#   ggplot2::labs(title = "Group A") + 
#   ggplot2::theme(axis.title = element_blank())
# 
# # Figure S4B
# figure_S4B_data <- globocan_8 |>
#   dplyr::filter(
#     cancer_type %in% c(
#       "Trachea, bronchus and lung", 
#       "Pancreas",
#       "Brain, nervous system"
#     )
#   ) |>
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Trachea, bronchus and lung", 
#       "Pancreas",
#       "Brain, nervous system"
#     )
#   ))
# 
# figure_S4B <- my_ggplot(figure_S4B_data) +
#   ggplot2::labs(y = "Age-Standardized Rate (per 100,000)", title = "Group B") +
#   ggplot2::theme(axis.title.y = element_text(hjust = 0), axis.title.x = element_blank())
# 
# # Figure S4C
# figure_S4C_data <- globocan_8 |>
#   dplyr::filter(
#     cancer_type %in% c(
#       "Cervix uteri",
#       "Stomach",
#       "Liver"
#     )
#   ) |>
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Cervix uteri",
#       "Stomach",
#       "Liver"
#     )
#   ))
# 
# figure_S4C <- my_ggplot(figure_S4C_data) +
#   ggplot2::labs(x = "Socio-demographic Index (SDI)", title = "Group C") + 
#   ggplot2::theme(axis.title.y = element_blank())
# 
# # Arrange on one page
# figure_S4 <-
#   figure_S4A + (figure_S4B + figure_S4C + plot_layout(ncol = 1)) +
#   plot_layout(ncol = 1,
#               guides = 'collect',
#               axis_titles = 'collect') &
#   theme(legend.position = 'bottom')
# 
# # Save figure S4 (PNG)
# ggsave(
#   plot = figure_S4,
#   filename = here("outputs", "FIG_S4.png"),
#   width = 20,
#   height = 15,
#   dpi = 500,
#   units = "in")

# # Figure S5A
# figure_S5A_data <- globocan_8 |>
#   dplyr::filter(
#     indicator != "MIR",
#     cancer_type %in% c(
#       "Breast", "Prostate", "Colorectum", "Melanoma of skin",
#       "Colon", "Corpus uteri", "Bladder", "Non-Hodgkin lymphoma",
#       "Rectum", "Kidney", "Thyroid", "Leukaemia", "Testis",
#       "Multiple myeloma", "Hodgkin lymphoma", "Oropharynx",
#       "Vulva", "Anus", "Lip, oral cavity"
#     )
#   ) |>
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Breast", "Prostate", "Colorectum", "Melanoma of skin",
#       "Colon", "Corpus uteri", "Bladder", "Non-Hodgkin lymphoma",
#       "Rectum", "Kidney", "Thyroid", "Leukaemia", "Testis",
#       "Multiple myeloma", "Hodgkin lymphoma", "Oropharynx",
#       "Vulva", "Anus", "Lip, oral cavity"
#     )
#   ))
# 
# figure_S5A <- my_ggplot(figure_S5A_data) +
#   ggplot2::labs(title = "Group A") +
#   ggplot2::theme(axis.title = element_blank())


# # Figure S5B
# figure_S5B_data <- globocan_8 |>
#   dplyr::filter(
#     indicator != "MIR",
#     cancer_type %in% c(
#       "Trachea, bronchus and lung",
#       "Pancreas",
#       "Brain, nervous system",
#       "Mesothelioma"
#     )
#   ) |>
#   dplyr::mutate(cancer_type = factor(
#     cancer_type,
#     levels = c(
#       "Trachea, bronchus and lung",
#       "Pancreas",
#       "Brain, nervous system",
#       "Mesothelioma"
#     )
#   ))
# 
# figure_S5B <- my_ggplot(figure_S5B_data) +
#   ggplot2::labs(y = "Age-Standardized Rate (per 100,000)", title = "Group B") +
#   ggplot2::theme(axis.title.y = element_text(hjust = 0), axis.title.x = element_blank())
# 

# Figure S5C
figure_S5C_data <- globocan_8 |>
  dplyr::filter(
    indicator != "MIR",
    cancer_type %in% c(
      "Stomach", "Cervix uteri", "Oesophagus",
      "Larynx", "Vagina", "Kaposi sarcoma"
    )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Stomach", "Cervix uteri", "Oesophagus",
      "Larynx", "Vagina", "Kaposi sarcoma"
    )
  ))

figure_S5C <- my_ggplot(figure_S5C_data) +
  ggplot2::labs(title = "Group C") +
  ggplot2::theme(axis.title.y = element_blank(), axis.title.y = element_blank())

# Figure S5D
figure_S5D_data <- globocan_8 |>
  dplyr::filter(
    indicator != "MIR",
    cancer_type %in% c(
      "Ovary", "Penis", "Salivary glands", "Hypopharynx", "Gallbladder", 
      "Liver and intrahepatic bile ducts", "Nasopharynx"
    )
  ) |>
  dplyr::mutate(cancer_type = factor(
    cancer_type,
    levels = c(
      "Ovary", "Penis", "Salivary glands", "Hypopharynx", "Gallbladder", 
      "Liver and intrahepatic bile ducts", "Nasopharynx"
    )
  ))

figure_S5D <- my_ggplot(figure_S5D_data) +
  ggplot2::labs(x = "Education and Income index (EdI)", title = "Group D") +
  ggplot2::theme(axis.title.y = element_blank())

# All in one page
figure_S5 <-
  figure_S5A + (figure_S5B + figure_S5C + figure_S5D + plot_layout(ncol = 1)) +
  plot_layout(ncol = 1,
              guides = 'collect',
              axis_titles = 'collect') &
  theme(legend.position = 'none')

ggsave(
  plot = figure_S5,
  filename = here("outputs", "FIG_S5.png"),
  width = 13,
  height = 30,
  dpi = 500,
  units = "in")
```


# Model 1. Simple linear model grouped by cancer_type

https://stats.stackexchange.com/questions/551264/when-to-check-model-assumptions

https://stackoverflow.com/questions/1169539/linear-regression-and-group-by-in-r

### Incidence

```{r}
models_incidence_edi <- globocan_8 |>
  dplyr::filter(indicator == "Incidence") |>
  dplyr::group_by(cancer_type) |>
  tidyr::nest() |>
  dplyr::mutate(model = purrr::map(data, ~ lm(asr_world ~ ed_i, data = .)))

# Summarizes information about the models
m1_incidence_edi <- models_incidence_edi |>
  dplyr::mutate(summary = map(model, broom::tidy)) |>
  tidyr::unnest(summary) |>
  dplyr::filter(term != "(Intercept)") |>
  dplyr::select(-data, -model, -term) |>
  dplyr::mutate(across(where(is.numeric), round, 2))

m2_incidence_edi <- models_incidence_edi |>
  dplyr::mutate(summary = map(model, broom::glance)) |>
  tidyr::unnest(summary) |>
  dplyr::select(-data, -model) |>
  dplyr::mutate(across(where(is.numeric), round, 2))

# Renamed
ASR_EdI_incidence <- dplyr::bind_cols(m1_incidence_edi, m2_incidence_edi) |>
  dplyr::select(
    cancer_type...1,
    estimate,
    r.squared,
    adj.r.squared,
    statistic...10,
    p.value...11,
    AIC,
    BIC,
    deviance
  ) |>
  dplyr::rename(
    `Cancer type` = cancer_type...1,
    Estimate = estimate,
    `R-squared` = r.squared,
    `Adjusted R-squared` = adj.r.squared,
    `F-statistic` = statistic...10,
    `p-value` = p.value...11,
    Deviance = deviance
  )
```

```{r}
models_incidence_hdi <- globocan_8 |>
  dplyr::filter(indicator == "Incidence") |>
  dplyr::group_by(cancer_type) |>
  tidyr::nest() |>
  dplyr::mutate(model = purrr::map(data, ~ lm(asr_world ~ hdi, data = .)))

# Summarizes information about the models
m1_incidence_hdi <- models_incidence_hdi |>
  dplyr::mutate(summary = map(model, broom::tidy)) |>
  tidyr::unnest(summary) |>
  dplyr::filter(term != "(Intercept)") |>
  dplyr::select(-data, -model, -term) |>
  dplyr::mutate(across(where(is.numeric), round, 2))

m2_incidence_hdi <- models_incidence_hdi |>
  dplyr::mutate(summary = map(model, broom::glance)) |>
  tidyr::unnest(summary) |>
  dplyr::select(-data, -model) |>
  dplyr::mutate(across(where(is.numeric), round, 2))

# Renamed
ASR_HDI_incidence <- dplyr::bind_cols(m1_incidence_hdi, m2_incidence_hdi) |>
  dplyr::select(
    cancer_type...1,
    estimate,
    r.squared,
    adj.r.squared,
    statistic...10,
    p.value...11,
    AIC,
    BIC,
    deviance
  ) |>
  dplyr::rename(
    `Cancer type` = cancer_type...1,
    Estimate = estimate,
    `R-squared` = r.squared,
    `Adjusted R-squared` = adj.r.squared,
    `F-statistic` = statistic...10,
    `p-value` = p.value...11,
    Deviance = deviance
  )
```

```{r}
models_incidence_sdi <- globocan_8 |>
  dplyr::filter(indicator == "Incidence") |>
  dplyr::group_by(cancer_type) |>
  tidyr::nest() |>
  dplyr::mutate(model = purrr::map(data, ~ lm(asr_world ~ sdi, data = .)))

# Summarizes information about the models
m1_incidence_sdi <- models_incidence_sdi |>
  dplyr::mutate(summary = map(model, broom::tidy)) |>
  tidyr::unnest(summary) |>
  dplyr::filter(term != "(Intercept)") |>
  dplyr::select(-data, -model, -term) |>
  dplyr::mutate(across(where(is.numeric), round, 2))

m2_incidence_sdi <- models_incidence_sdi |>
  dplyr::mutate(summary = map(model, broom::glance)) |>
  tidyr::unnest(summary) |>
  dplyr::select(-data, -model) |>
  dplyr::mutate(across(where(is.numeric), round, 2))

# Renamed
ASR_SDI_incidence <- dplyr::bind_cols(m1_incidence_sdi, m2_incidence_sdi) |>
  dplyr::select(
    cancer_type...1,
    estimate,
    r.squared,
    adj.r.squared,
    statistic...10,
    p.value...11,
    AIC,
    BIC,
    deviance
  ) |>
  dplyr::rename(
    `Cancer type` = cancer_type...1,
    Estimate = estimate,
    `R-squared` = r.squared,
    `Adjusted R-squared` = adj.r.squared,
    `F-statistic` = statistic...10,
    `p-value` = p.value...11,
    Deviance = deviance
  )
```

### Mortality

```{r}
models_mortality_edi <- globocan_8 |>
  dplyr::filter(indicator == "Mortality") |>
  dplyr::group_by(cancer_type) |>
  tidyr::nest() |>
  dplyr::mutate(model = purrr::map(data, ~ lm(asr_world ~ ed_i, data = .)))

# Summarizes information about the models
m1_mortality_edi <- models_mortality_edi |>
  dplyr::mutate(summary = map(model, broom::tidy)) |>
  tidyr::unnest(summary) |>
  dplyr::filter(term != "(Intercept)") |>
  dplyr::select(-data, -model, -term) |>
  dplyr::mutate(across(where(is.numeric), round, 2))

m2_mortality_edi <- models_mortality_edi |>
  dplyr::mutate(summary = map(model, broom::glance)) |>
  tidyr::unnest(summary) |>
  dplyr::select(-data, -model) |>
  dplyr::mutate(across(where(is.numeric), round, 2))

# Renamed
ASR_EdI_mortality <- dplyr::bind_cols(m1_mortality_edi, m2_mortality_edi) |>
  dplyr::select(
    cancer_type...1,
    estimate,
    r.squared,
    adj.r.squared,
    statistic...10,
    p.value...11,
    AIC,
    BIC,
    deviance
  ) |>
  dplyr::rename(
    `Cancer type` = cancer_type...1,
    Estimate = estimate,
    `R-squared` = r.squared,
    `Adjusted R-squared` = adj.r.squared,
    `F-statistic` = statistic...10,
    `p-value` = p.value...11,
    Deviance = deviance
  )
```

```{r}
models_mortality_hdi <- globocan_8 |>
  dplyr::filter(indicator == "Mortality") |>
  dplyr::group_by(cancer_type) |>
  tidyr::nest() |>
  dplyr::mutate(model = purrr::map(data, ~ lm(asr_world ~ hdi, data = .)))

# Summarizes information about the models
m1_mortality_hdi <- models_mortality_hdi |>
  dplyr::mutate(summary = map(model, broom::tidy)) |>
  tidyr::unnest(summary) |>
  dplyr::filter(term != "(Intercept)") |>
  dplyr::select(-data, -model, -term) |>
  dplyr::mutate(across(where(is.numeric), round, 2))

m2_mortality_hdi <- models_mortality_hdi |>
  dplyr::mutate(summary = map(model, broom::glance)) |>
  tidyr::unnest(summary) |>
  dplyr::select(-data, -model) |>
  dplyr::mutate(across(where(is.numeric), round, 2))

# Renamed
ASR_HDI_mortality <- dplyr::bind_cols(m1_mortality_hdi, m2_mortality_hdi) |>
  dplyr::select(
    cancer_type...1,
    estimate,
    r.squared,
    adj.r.squared,
    statistic...10,
    p.value...11,
    AIC,
    BIC,
    deviance
  ) |>
  dplyr::rename(
    `Cancer type` = cancer_type...1,
    Estimate = estimate,
    `R-squared` = r.squared,
    `Adjusted R-squared` = adj.r.squared,
    `F-statistic` = statistic...10,
    `p-value` = p.value...11,
    Deviance = deviance
  )
```

```{r}
models_mortality_sdi <- globocan_8 |>
  dplyr::filter(indicator == "Mortality") |>
  dplyr::group_by(cancer_type) |>
  tidyr::nest() |>
  dplyr::mutate(model = purrr::map(data, ~ lm(asr_world ~ sdi, data = .)))

# Summarizes information about the models
m1_mortality_sdi <- models_mortality_sdi |>
  dplyr::mutate(summary = map(model, broom::tidy)) |>
  tidyr::unnest(summary) |>
  dplyr::filter(term != "(Intercept)") |>
  dplyr::select(-data, -model, -term) |>
  dplyr::mutate(across(where(is.numeric), round, 2))

m2_mortality_sdi <- models_mortality_sdi |>
  dplyr::mutate(summary = map(model, broom::glance)) |>
  tidyr::unnest(summary) |>
  dplyr::select(-data, -model) |>
  dplyr::mutate(across(where(is.numeric), round, 2))

# Renamed
ASR_SDI_mortality <- dplyr::bind_cols(m1_mortality_sdi, m2_mortality_sdi) |>
  dplyr::select(
    cancer_type...1,
    estimate,
    r.squared,
    adj.r.squared,
    statistic...10,
    p.value...11,
    AIC,
    BIC,
    deviance
  ) |>
  dplyr::rename(
    `Cancer type` = cancer_type...1,
    Estimate = estimate,
    `R-squared` = r.squared,
    `Adjusted R-squared` = adj.r.squared,
    `F-statistic` = statistic...10,
    `p-value` = p.value...11,
    Deviance = deviance
  )
```

### Mortality to incidence ratio

```{r}
models_miratio_edi <- globocan_8 |>
  dplyr::filter(indicator == "miratio") |>
  group_by(cancer_type) |> 
  tidyr::nest() |>
  dplyr::mutate(
    data = purrr::map(data, ~ dplyr::filter(.x, !is.na(asr_world) & !is.na(ed_i) & is.finite(asr_world) & is.finite(ed_i))),
    model = purrr::map(data, ~ lm(asr_world ~ ed_i, data = .))
  )

# Summarizes information about the models
m1_miratio_edi <- models_miratio_edi |>
  dplyr::mutate(summary = map(model, broom::tidy)) |>
  tidyr::unnest(summary) |>
  dplyr::filter(term != "(Intercept)") |>
  dplyr::select(-data, -model, -term) |>
  dplyr::mutate(across(where(is.numeric), round, 4))

m2_miratio_edi <- models_miratio_edi |>
  dplyr::mutate(summary = map(model, broom::glance)) |>
  tidyr::unnest(summary) |>
  dplyr::select(-data, -model) |>
  dplyr::mutate(across(where(is.numeric), round, 4))

# Renamed
ASR_EdI_miratio <- dplyr::bind_cols(m1_miratio_edi, m2_miratio_edi) |>
  dplyr::select(
    cancer_type...1,
    estimate,
    r.squared,
    adj.r.squared,
    statistic...10,
    p.value...11,
    AIC,
    BIC,
    deviance
  ) |>
  dplyr::rename(
    `Cancer type` = cancer_type...1,
    Estimate = estimate,
    `R-squared` = r.squared,
    `Adjusted R-squared` = adj.r.squared,
    `F-statistic` = statistic...10,
    `p-value` = p.value...11,
    Deviance = deviance
  )
```

```{r}
models_miratio_hdi <- globocan_8 |>
  dplyr::filter(indicator == "miratio") |>
  group_by(cancer_type) |> 
  tidyr::nest() |>
  dplyr::mutate(
    data = purrr::map(data, ~ dplyr::filter(.x, !is.na(asr_world) & !is.na(hdi) & is.finite(asr_world) & is.finite(hdi))),
    model = purrr::map(data, ~ lm(asr_world ~ hdi, data = .))
  )

# Summarizes information about the models
m1_miratio_hdi <- models_miratio_hdi |>
  dplyr::mutate(summary = map(model, broom::tidy)) |>
  tidyr::unnest(summary) |>
  dplyr::filter(term != "(Intercept)") |>
  dplyr::select(-data, -model, -term) |>
  dplyr::mutate(across(where(is.numeric), round, 4))

m2_miratio_hdi <- models_miratio_hdi |>
  dplyr::mutate(summary = map(model, broom::glance)) |>
  tidyr::unnest(summary) |>
  dplyr::select(-data, -model) |>
  dplyr::mutate(across(where(is.numeric), round, 4))

# Renamed
ASR_HDI_miratio <- dplyr::bind_cols(m1_miratio_hdi, m2_miratio_hdi) |>
  dplyr::select(
    cancer_type...1,
    estimate,
    r.squared,
    adj.r.squared,
    statistic...10,
    p.value...11,
    AIC,
    BIC,
    deviance
  ) |>
  dplyr::rename(
    `Cancer type` = cancer_type...1,
    Estimate = estimate,
    `R-squared` = r.squared,
    `Adjusted R-squared` = adj.r.squared,
    `F-statistic` = statistic...10,
    `p-value` = p.value...11,
    Deviance = deviance
  )
```

```{r}
models_miratio_sdi <- globocan_8 |>
  dplyr::filter(indicator == "miratio") |>
  group_by(cancer_type) |> 
  tidyr::nest() |>
  dplyr::mutate(
    data = purrr::map(data, ~ dplyr::filter(.x, !is.na(asr_world) & !is.na(sdi) & is.finite(asr_world) & is.finite(sdi))),
    model = purrr::map(data, ~ lm(asr_world ~ sdi, data = .))
  )

# Summarizes information about the models
m1_miratio_sdi <- models_miratio_sdi |>
  dplyr::mutate(summary = map(model, broom::tidy)) |>
  tidyr::unnest(summary) |>
  dplyr::filter(term != "(Intercept)") |>
  dplyr::select(-data, -model, -term) |>
  dplyr::mutate(across(where(is.numeric), round, 2))

m2_miratio_sdi <- models_miratio_sdi |>
  dplyr::mutate(summary = map(model, broom::glance)) |>
  tidyr::unnest(summary) |>
  dplyr::select(-data, -model) |>
  dplyr::mutate(across(where(is.numeric), round, 2))

# Renamed
ASR_SDI_miratio <- dplyr::bind_cols(m1_miratio_sdi, m2_miratio_sdi) |>
  dplyr::select(
    cancer_type...1,
    estimate,
    r.squared,
    adj.r.squared,
    statistic...10,
    p.value...11,
    AIC,
    BIC,
    deviance
  ) |>
  dplyr::rename(
    `Cancer type` = cancer_type...1,
    Estimate = estimate,
    `R-squared` = r.squared,
    `Adjusted R-squared` = adj.r.squared,
    `F-statistic` = statistic...10,
    `p-value` = p.value...11,
    Deviance = deviance
  )
```

### Plotting

```{r}
globocan_8_incidence <- dplyr::filter(globocan_8, indicator == "Incidence")
data_relevant <- globocan_8_incidence %>%
  select(cancer_type, hdi, ed_i, sdi, asr_world)

data_relevant_clean <- data_relevant %>% drop_na()

correlations <- data_relevant_clean %>%
  group_by(cancer_type) %>%
  summarise(
    hdi_cor = cor(asr_world, hdi),
    edi_cor = cor(asr_world, ed_i),
    sdi_cor = cor(asr_world, sdi)
  )

correlations_r2 <- correlations %>%
  mutate(
    HDI = round(hdi_cor^2, 2),
    EDI = round(edi_cor^2, 2),
    SDI = round(sdi_cor^2, 2)
  )

correlations_r2_long <- correlations_r2 %>%
  select(cancer_type, HDI, EDI, SDI) %>%
  gather(key = "indicator", value = "R2", -cancer_type)

filtered_correlations <- correlations_r2_long %>%
  filter(R2 > 0.0)

data_ordered <- filtered_correlations %>%
  group_by(cancer_type) %>%
  summarise(max_R2 = max(R2, na.rm = TRUE)) %>%
  arrange(max_R2) 

data_order <- filtered_correlations %>%
  mutate(cancer_type = factor(cancer_type, levels = data_ordered$cancer_type))

# Crear el heatmap
heatmap_incidence <- 
  ggplot(data_order, 
         aes(x = indicator, 
             y = cancer_type, 
             fill = R2)) +
  geom_tile(color = "white") + # Crear celdas
  geom_text(aes(label = sprintf("%.2f", R2)),
            color = "black", size = 4.5) + # Mostrar solo los valores de RÂ²
  scale_fill_distiller(
    palette = "RdBu",    # Paleta RdBu
    direction = 1,      # Invierte los colores
    limits = c(0, 0.63)) +  # LÃ­mite de valores 
  labs(
    title = "Incidence"
  ) +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.text.x = element_text(hjust = 1, size = 14),
    axis.text.y = element_text(size = 15),
    title = element_text(size = 14),
    panel.grid = element_blank(),
    legend.position = "none")

globocan_8_mortality <- dplyr::filter(globocan_8, indicator == "Mortality")

data_relevant1 <- globocan_8_mortality %>%
  select(cancer_type, hdi, ed_i, sdi, asr_world)

data_relevant_clean1 <- data_relevant1 %>% drop_na()

correlations1 <- data_relevant_clean1 %>%
  group_by(cancer_type) %>%
  summarise(
    hdi_cor = cor(asr_world, hdi),
    edi_cor = cor(asr_world, ed_i),
    sdi_cor = cor(asr_world, sdi)
  )

correlations_r2_1 <- correlations1 %>%
  mutate(
    HDI = round(hdi_cor^2, 2),
    EDI = round(edi_cor^2, 2),
    SDI = round(sdi_cor^2, 2)
  )

correlations_r2_long1 <- correlations_r2_1 %>%
  select(cancer_type, HDI, EDI, SDI) %>%
  gather(key = "indicator", value = "R2", -cancer_type)

filtered_correlations1 <- correlations_r2_long1 %>%
  filter(R2 > 0.0)

data_ordered1 <- filtered_correlations1 %>%
  group_by(cancer_type) %>%
  summarise(max_R2 = max(R2, na.rm = TRUE)) %>%
  arrange(max_R2)  # Ordenar de menor a mayor

data_order1 <- 
  filtered_correlations1 %>%
  mutate(cancer_type = factor(cancer_type, levels = data_ordered1$cancer_type))

heatmap_mortality <- 
  ggplot(data_order1, 
         aes(x = indicator, y = cancer_type, fill = R2)) +
  geom_tile(color = "white") + 
  geom_text(aes(label = sprintf("%.2f", R2)),
            color = "black", size = 4.5) + 
  scale_fill_distiller(
    palette = "RdBu",    
    direction = 1,      
    limits = c(0, 0.57)) +  
  labs(
    title = "Mortality",
    x = "Socioeconomic indicator"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(hjust = 1, size = 14),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.text.y = element_text(size = 15),
    axis.title.x = element_text(size = 16, margin = margin(t = 10)), 
    panel.grid = element_blank(),
    title = element_text(size = 14),
    legend.position = "none")

###

globocan_8_MIR <- dplyr::filter(globocan_8, indicator == "MIR")

data_relevant2 <- globocan_8_MIR %>%
  select(cancer_type, hdi, ed_i, sdi, asr_world)

data_relevant_clean2 <- data_relevant2 %>% drop_na()

correlations2 <- data_relevant_clean2 %>%
  group_by(cancer_type) %>%
  summarise(
    hdi_cor = cor(asr_world, hdi),
    edi_cor = cor(asr_world, ed_i),
    sdi_cor = cor(asr_world, sdi)
  )

correlations_r2_2 <- correlations2 %>%
  mutate(
    HDI = round(hdi_cor^2, 2),
    EDI = round(edi_cor^2, 2),
    SDI = round(sdi_cor^2, 2)
  )

correlations_r2_long2 <- correlations_r2_2 %>%
  select(cancer_type, HDI, EDI, SDI) %>%
  gather(key = "indicator", value = "R2", -cancer_type)

filtered_correlations2 <- correlations_r2_long2 %>%
  filter(R2 > 0.0)

data_ordered2 <- filtered_correlations2 %>%
  group_by(cancer_type) %>%
  summarise(max_R2 = max(R2, na.rm = TRUE)) %>%
  arrange(max_R2)  # Ordenar de menor a mayor

data_order2 <- filtered_correlations2 %>%
  mutate(cancer_type = factor(cancer_type, levels = data_ordered2$cancer_type))

heatmap_mir <- 
  ggplot(data_order2, 
         aes(x = indicator, y = cancer_type, fill = R2)) +
  geom_tile(color = "white") + # Crear celdas
  geom_text(aes(label = sprintf("%.2f", R2)),
            color = "black", size = 4.5) + # Mostrar solo los valores de RÂ²
  scale_fill_distiller(
    palette = "RdBu",    # Paleta RdBu
    direction = 1,      # Invierte los colores
    limits = c(0, 0.79)) +  # LÃ­mite de valores 
  labs(
    title = "MIR",
    fill = expression(R^2)
  ) +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_text(hjust = 1, size = 14),
    axis.title.y = element_blank(),    
    axis.ticks.y = element_blank(),
    axis.text.y = element_text(size = 15),
    title = element_text(size = 14),
    panel.grid = element_blank(),
    legend.text = element_text(size = 14), 
    legend.title = element_text(size = 16, face = "bold"), 
    legend.key.size = unit(1, "cm")) 
  ##coord_fixed(ratio = 0.6)  # Asegurar proporciones iguales para celdas cuadradas
  ##legend.position = "none"

library(patchwork)

# Combinar los grÃ¡ficos con una leyenda comÃºn
combined_plot <- (heatmap_incidence + heatmap_mortality + heatmap_mir) +
  plot_layout(guides = "collect") +  # Recolecta todas las leyendas
  plot_annotation(
    title = element_blank(),
    theme = theme(plot.title = element_text(hjust = 0.5))
  )

# Mostrar el grÃ¡fico combinado
print(combined_plot)

ggsave(
  plot = combined_plot,
  filename = here("outputs", "heatmap.jpeg"),
  width = 20,
  height = 10,
  dpi = 500,
  units = "in")
```

# Model 2. One-factor ANOVA on selected cancers

Main Reference: https://bmjopen.bmj.com/content/bmjopen/9/10/e028461.full.pdf

Categorical variables: hdi, sdi, edi Continuous variables: Mortality, Incidence

Pairwise comparisons Tamhane T2 test for variables with normal distribution but heterogeneous variances ------- for

### For Education and Income index (EDI) vs Incidence

Visual inspection

```{r}
p_incidence_v_edi

globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Incidence") |>
  #filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  ggplot(aes(sample = asr_world)) + 
  stat_qq() + 
  stat_qq_line() + 
  facet_wrap(~ cancer_type,
             scales = "free") + 
  labs(x = "Theoretical Quantiles", 
       y = "Sample Quantiles") + 
  theme_minimal()
```

Perform ANOVA, extract residuals, test normality and homogeneity of variances by cancer type

```{r include=FALSE}
stat_incid_v_edi <-
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Incidence") |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ edi_categories, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ edi_categories, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_incid_v_edi)


```

**Table 1.** Selection of 5 cancer types based on normality test, qqplot

| NÂ°  | Cancer type                   | R\^2 | Shapiro p value | Levene p value | anova p values |
|------------|------------|------------|------------|------------|------------|
| 1   | Breast                        |      | 0.358           | \<0.001        | \<0.001        |
| 2   | Hodgkin lymphoma              |      | 0.558           | \<0.001        | \<0.001        |
| 3   | Leukaemia                     |      | 0.251           | 0.002          | \<0.001        |
| 4   | Non-hodgkin lymphoma          |      | 0.819           | \<0.001        | \<0.001        |
| 5   | Brain, central nervous system |      | 0.635           | 0.001          | \<0.001        |

Pairwise comparison for normally distributed data with unequal variances

```{r}
pw_gh_test_inc_edi = 
  globocan_8 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Incidence" & 
           cancer_type %in% c("Breast", 
                              "Hodgkin lymphoma",
                              "Non-Hodgkin lymphoma",
                              "Leukaemia",
                              "Brain, nervous system")) |> 
  group_by(cancer_type) |> 
  rstatix::games_howell_test(asr_world ~ edi_categories)

View(pw_gh_test_inc_edi)
```

### Plotting results

https://rpkgs.datanovia.com/ggpubr/reference/stat_pvalue_manual.html

```{r}
data_inc_edi_globocan_8 = 
  globocan_8 |>  
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Incidence" & 
           cancer_type %in% c("Breast", 
                              "Hodgkin lymphoma",
                              "Non-Hodgkin lymphoma",
                              "Leukaemia",
                              "Brain, nervous system") & !is.na(edi_categories))

data_inc_edi_globocan_8$edi_categories <- 
  factor(data_inc_edi_globocan_8$edi_categories,
         levels = c("Low", "Medium", "High", "Very high"))

pw_gh_test_inc_edi <- pw_gh_test_inc_edi  |> 
  mutate(y.position = case_when(
    cancer_type == "Brain, nervous system" ~ 8.5,
    cancer_type == "Breast" ~ 105,
    cancer_type == "Hodgkin lymphoma" ~ 3.5,
    cancer_type == "Leukaemia" ~ 12,
    TRUE ~ 14.2  # Default y.position for other cancer types
  )) |> 
  dplyr::filter(
    (group1 == "Low" & group2 == "Medium") |
      (group1 == "Medium" & group2 == "High") |
      (group1 == "High" & group2 == "Very high") |
      (group1 == "High" & group2 == "Medium") |
      (group1 == "Very high" & group2 == "High")
    )

p_edi_inc = 
  ggboxplot(data_inc_edi_globocan_8, 
            x = "edi_categories", 
            y = "asr_world",
            facet.by = "cancer_type",
            nrow= 1,
            scales = "free",
            xlab = "EdI category",
            ylab = "Age-standarized incidence rate (per 100,000)",
            width = 0.5) 


p1_edi_inc = 
  p_edi_inc + stat_pvalue_manual(pw_gh_test_inc_edi, 
                       label = "p.adj.signif",
                       step.group.by = "cancer_type",
                       y.position = "y.position",
                       step.increase = 0.06,
                       size = 7.3) +
  theme(
    axis.title = element_text(size = 24),       
    axis.text = element_text(size = 20),        
    strip.text = element_text(size = 24),      
    legend.text = element_text(size = 23),     
    legend.title = element_text(size = 24),
    panel.spacing = unit(1.5, "lines"),
    axis.text.x = element_text(margin = margin(5,0,10,0),
                               angle = 35, hjust = 1),
    axis.text.y = element_text(margin = margin(0,5,0,10))
  ) +
  geom_quasirandom(alpha = 0.5, size = 3.5) 


ggsave(
  plot = p1_edi_inc,
  filename = here("outputs", "p1_edi_inc.jpeg"),
  width = 24,
  height = 8,
  dpi = 500,
  units = "in")
```

### Education and Income index (EDI) vs mortality

Visual inspection

```{r}
p_mortality_v_edi

globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Mortality") |>
  #filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  ggplot(aes(sample = asr_world)) + 
  stat_qq() + 
  stat_qq_line() + 
  facet_wrap(~cancer_type,
             scales = "free") + 
  labs(x = "Theoretical Quantiles", 
       y = "Sample Quantiles") + 
  theme_minimal()
```

Perform ANOVA, extract residuals, test normality and homogeneity of variances by cancer type

```{r include=FALSE}
stat_mort_v_edi <- 
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Mortality") |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ edi_categories, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ edi_categories, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_mort_v_edi)
```

**Table 2.** Selection of cancer types and statistics for mortality vs edi

| NÂ°  | Cancer type                   | R\^2 | Shapiro P value | Levene P value | ANOVA P values |     |
|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
| 1   | Brain, central nervous system |      | 0.158           | 0.004          | \<0.001        |     |

Pairwise comparison for normally distributed data with unequal variances

```{r}
pw_gh_test_mort_edi = 
  globocan_8 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Mortality" & 
           cancer_type %in% c("Brain, nervous system")) |> 
  group_by(cancer_type) |> 
  rstatix::games_howell_test(asr_world ~ edi_categories)

View(pw_gh_test_mort_edi)
```

### Plotting results

```{r}
data_mort_edi_globocan_8 = 
  globocan_8 |>  
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Mortality" & 
           cancer_type %in% c("Brain, nervous system") & !is.na(edi_categories))

data_mort_edi_globocan_8$edi_categories = 
  factor(data_mort_edi_globocan_8$edi_categories,
         levels = c("Low", "Medium", "High", "Very high"))

pw_gh_test_mort_edi <- pw_gh_test_mort_edi  |>
  mutate(y.position = case_when(
    cancer_type == "Brain, nervous system" ~ 7
    )) |> 
  dplyr::filter((group1 == "Low" & group2 == "Medium") |
         (group1 == "High" & group2 == "Medium") |
         (group1 == "High" & group2 == "Very high"))

p_edi_mort <- ggboxplot(data_mort_edi_globocan_8, 
               x = "edi_categories", 
               y = "asr_world",
               facet.by = "cancer_type",
               nrow = 1,
               scales = "free",
               xlab = "EdI category",
               ylab = "Age-standarized mortality rate (per 100,000)",
               width = 0.5
               ) 

p1_edi_mort = 
  p_edi_mort + stat_pvalue_manual(pw_gh_test_mort_edi, 
                       label = "p.adj.signif",
                       y.position = "y.position",
                       step.increase = 0.06,
                       size = 7.3) +
  theme(
    axis.title = element_text(size = 24),
    axis.text = element_text(size = 20),        
    strip.text = element_text(size = 24),      
    legend.text = element_text(size = 23),     
    legend.title = element_text(size = 24),
    axis.text.x = element_text(margin = margin(5,0,10,0),
                               angle = 35, hjust = 1),
    axis.text.y = element_text(margin = margin(0,5,0,10)),
    panel.spacing = unit(1.5, "lines")
  ) +
  geom_quasirandom(alpha = 0.5, size = 3.5) 
  #geom_boxplot(lwd = 0.9)


ggsave(
  plot = p1_edi_mort,
  filename = here("outputs", "p1_edi_mort.jpeg"),
  width = 6,
  height = 9,
  dpi = 500,
  units = "in")
```

### Education and Income index (EDI) vs mortality to incidence ratio

Visual inspection

```{r}
p_miratio_v_edi

globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "MIR") |>
  filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  ggplot(aes(sample = asr_world)) + 
  stat_qq() + 
  stat_qq_line() + 
  facet_wrap(~cancer_type,
             scales = "free") + 
  labs(x = "Theoretical Quantiles", 
       y = "Sample Quantiles") + 
  theme_minimal()
```

Perform ANOVA, extract residuals, test normality and homogeneity of variances by cancer type

```{r include=FALSE}
stat_miratio_v_edi <- 
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "MIR") |>
  filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ edi_categories, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ edi_categories, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_miratio_v_edi)
```

**Table 2.** Selection of cancer types and statistics for mortality vs edi

| NÂ°  | Cancer type                   | R\^2 | Shapiro P value | Levene P value | ANOVA P values |     |
|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
| 1   | Brain, central nervous system |      | 0.158           | 0.004          | \<0.001        |     |

Pairwise comparison for normally distributed data with unequal variances

```{r}
pw_gh_test_miratio_edi = 
  globocan_8 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "MIR" & 
           cancer_type %in% c("Prostate",
                              "All cancers excl. non-melanoma skin cancer",
                              "Non-Hodgkin lymphoma",
                              "Cervix uteri",
                              "Rectum"
                              )) |> 
  group_by(cancer_type) |> 
  rstatix::games_howell_test(asr_world ~ edi_categories)

View(pw_gh_test_miratio_edi)
```

### Plotting results

https://rpkgs.datanovia.com/ggpubr/reference/stat_pvalue_manual.html

```{r}
data_mir_edi_globocan_8 = 
  globocan_8 |>  
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "MIR" & 
           cancer_type %in% c("Prostate",
                              "All cancers excl. non-melanoma skin cancer",
                              "Non-Hodgkin lymphoma",
                              "Cervix uteri",
                              "Rectum") & !is.na(edi_categories))

data_mir_edi_globocan_8$edi_categories <- 
  factor(data_mir_edi_globocan_8$edi_categories,
         levels = c("Low", "Medium", "High", "Very high"))

pw_gh_test_miratio_edi <- pw_gh_test_miratio_edi  |> 
  mutate(y.position = case_when(
    cancer_type == "Prostate" ~ 0.75,
    cancer_type == "All cancers excl. non-melanoma skin cancer" ~ 0.8,
    cancer_type == "Rectum" ~ 0.98,
    cancer_type == "Cervix uteri" ~ 0.88,
    TRUE ~ 0.85  # Default y.position for other cancer types
  )) |> 
  dplyr::filter(
    (group1 == "Low" & group2 == "Medium") |
      (group1 == "Medium" & group2 == "High") |
      (group1 == "High" & group2 == "Very high") |
      (group1 == "High" & group2 == "Medium") |
      (group1 == "Very high" & group2 == "High")
    )

p_edi_mir = 
  ggboxplot(data_mir_edi_globocan_8, 
            x = "edi_categories", 
            y = "asr_world",
            facet.by = "cancer_type",
            nrow = 1,
            scales = "free",
            xlab = "EdI category",
            ylab = "Mortality to incidence ratio",
            width = 0.5) 

p1_edi_mir = 
  p_edi_mir + stat_pvalue_manual(pw_gh_test_miratio_edi, 
                       label = "p.adj.signif",
                       step.group.by = "cancer_type",
                       y.position = "y.position",
                       step.increase = 0.06,
                       size = 7.3) +
  theme(
    axis.title = element_text(size = 24),       
    axis.text = element_text(size = 20),        
    strip.text = element_text(size = 24),      
    legend.text = element_text(size = 23),     
    legend.title = element_text(size = 24),
    panel.spacing = unit(1.5, "lines"),
    axis.text.x = element_text(margin = margin(5,0,10,0),
                               angle = 35, hjust = 1),
    axis.text.y = element_text(margin = margin(0,5,0,10))
  ) +
  geom_quasirandom(alpha = 0.5, size = 3.5) 
  #geom_boxplot(lwd = 0.9)

ggsave(
  plot = p1_edi_mir,
  filename = here("outputs", "p1_edi_mir.jpeg"),
  width = 25,
  height = 8,
  dpi = 500,
  units = "in")
```

### Human Development Index (HDI) vs Incidence

Visual inspection

```{r}
p_incidence_v_hdi

globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Incidence") |>
  #filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  ggplot(aes(sample = asr_world)) + 
  stat_qq() + 
  stat_qq_line() + 
  facet_wrap(~ cancer_type,
             scales = "free") + 
  labs(x = "Theoretical Quantiles", 
       y = "Sample Quantiles") + 
  theme_minimal()
```

Perform ANOVA, extract residuals, test normality and homogeneity of variances by cancer type

```{r include=FALSE}
stat_incid_v_hdi <-
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Incidence") |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ hdi_category, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ hdi_category, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_incid_v_hdi)
```

**Table 3.** Selection of cancer types and statistics for incidence vs hdi

| NÂ°  | Cancer type                   | R\^2 | Shapiro p value | Levene p value | anova p values |     |
|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
| 1   | Breast                        |      | 0.920           | \<0.001        | \<0.001        |     |
| 2   | Hodking Lymphoma              |      | 0.838           | \<0.001        | \<0.001        |     |
| 3   | Brain, central nervous system |      | 0.562           | 0.001          |                |     |
| 4   | Non-Hodgkin lymphoma          |      | 0.180           | \<0.001        |                |     |

Pairwise comparison for normally distributed data with unequal variances

```{r}
pw_gh_test_inc_hdi = 
  globocan_8 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Incidence" & 
           cancer_type %in% c("Breast", 
                              "Hodgkin lymphoma",
                              "Brain, nervous system",
                              "Non-Hodgkin lymphoma")) |> 
  group_by(cancer_type) |> 
  rstatix::games_howell_test(asr_world ~ hdi_category)

View(pw_gh_test_inc_hdi)
```

### Plotting results

https://rpkgs.datanovia.com/ggpubr/reference/stat_pvalue_manual.html

```{r}
data_inc_hdi_globocan_8 = 
  globocan_8 |>  
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Incidence" & 
           cancer_type %in% c("Breast", 
                              "Hodgkin lymphoma",
                              "Non-Hodgkin lymphoma",
                              "Brain, nervous system") & !is.na(edi_categories))

data_inc_hdi_globocan_8$hdi_category <- 
  factor(data_inc_hdi_globocan_8$hdi_category,
         levels = c("Low", "Medium", "High", "Very high"))

pw_gh_test_inc_hdi <- pw_gh_test_inc_hdi  |> 
  mutate(y.position = case_when(
    cancer_type == "Brain, nervous system" ~ 8,
    cancer_type == "Breast" ~ 105,
    cancer_type == "Hodgkin lymphoma" ~ 3.5,
    TRUE ~ 15  # Default y.position for other cancer types
  )) |> 
  dplyr::filter((group1 == "Low" & group2 == "Medium") |
         (group1 == "Medium" & group2 == "High") |
         (group1 == "High" & group2 == "Very high") |
         (group1 == "High" & group2 == "Medium") |
         (group1 == "Very high" & group2 == "High"))

p_hdi_inc <- ggboxplot(data_inc_hdi_globocan_8, 
               x = "hdi_category", 
               y = "asr_world",
               facet.by = "cancer_type",
               nrow = 1,
               scales = "free",
               xlab = "HDI category",
               ylab = "Age-standarized incidence rate (per 100,000)",
               width = 0.5
               ) 

p1_hdi_inc = 
  p_hdi_inc + stat_pvalue_manual(pw_gh_test_inc_hdi, 
                       label = "p.adj.signif",
                       step.group.by = "cancer_type",
                       y.position = "y.position",
                       step.increase = 0.06,
                       size = 7.3) +
  theme(
    axis.title = element_text(size = 24),       
    axis.text = element_text(size = 20),        
    strip.text = element_text(size = 24),      
    legend.text = element_text(size = 23),     
    legend.title = element_text(size = 24),
    panel.spacing = unit(2, "lines"),
    axis.text.x = element_text(margin = margin(5,0,10,0),
                               angle = 35, hjust = 1),
    axis.text.y = element_text(margin = margin(0,0,0,0))
  ) +
  geom_quasirandom(alpha = 0.5, size = 3.5)
  #geom_boxplot(lwd = 0.9)

ggsave(
  plot = p1_hdi_inc,
  filename = here("outputs", "p1_hdi_inc.jpeg"),
  width = 20,
  height = 8,
  dpi = 500,
  units = "in")
```

### Mortality vs Human Development Index (HDI)

Visual inspection

```{r}
p_incidence_v_hdi

globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Incidence") |>
  #filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  ggplot(aes(sample = asr_world)) + 
  stat_qq() + 
  stat_qq_line() + 
  facet_wrap(~cancer_type,
             scales = "free") + 
  labs(x = "Theoretical Quantiles", 
       y = "Sample Quantiles") + 
  theme_minimal()
```

Perform ANOVA, extract residuals, test normality and homogeneity of variances by cancer type

```{r}
stat_mort_v_hdi <- 
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Mortality") |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ hdi_category, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ hdi_category, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_mort_v_hdi)
```

**Table 4.** Selection of cancer types and statistics for mortality vs hdi

| NÂ°  | Cancer type                   | R\^2 | Shapiro p value | Levene p value | anova p values |     |
|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
| 1   | Brain, central nervous system |      | 0.279           | 0.005          | \<0.001        |     |
| 2   | Kidney                        |      | 0.263           | \<0.001        | \<0.001        |     |
| 3   | Colon                         |      | 0.058           | \<0.001        | \<0.001        |     |

Pairwise comparison for normally distributed data with equal variances

```{r}
pw_gh_test_mort_hdi = 
  globocan_8 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Mortality" & 
           cancer_type %in% c("Kidney", 
                              "Brain, nervous system",
                              "Colon")) |> 
  group_by(cancer_type) |> 
  rstatix::games_howell_test(asr_world ~ hdi_category)

View(pw_gh_test_mort_hdi)
```

### Plotting results

```{r}
data_mort_hdi_globocan_8 = 
  globocan_8 |>  
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Mortality" & 
           cancer_type %in% c("Kidney",
                              "Brain, nervous system",
                              "Colon") & !is.na(edi_categories))

data_mort_hdi_globocan_8$hdi_category <- 
  factor(data_mort_hdi_globocan_8$hdi_category,
         levels = c("Low", "Medium", "High", "Very high"))

pw_gh_test_mort_hdi <- pw_gh_test_mort_hdi  |> 
  mutate(y.position = case_when(
    cancer_type == "Kidney" ~ 4.3,
    cancer_type == "Brain, nervous system" ~ 6.7,
    cancer_type == "Colon" ~ 13
  )) |> 
  dplyr::filter(
    (group1 == "Low" & group2 == "Medium") |
      (group1 == "Medium" & group2 == "High") |
      (group1 == "High" & group2 == "Very high") |
      (group1 == "High" & group2 == "Medium") |
      (group1 == "Very high" & group2 == "High")
    )

p_hdi_mort = 
  ggboxplot(data_mort_hdi_globocan_8, 
            x = "hdi_category", 
            y = "asr_world",
            facet.by = "cancer_type",
            scales = "free",
            xlab = "HDI category",
            ylab = "Age-standarized mortality rate (per 100,000)",
            width = 0.5) 

p1_hdi_mort = 
  p_hdi_mort + stat_pvalue_manual(pw_gh_test_mort_hdi, 
                       label = "p.adj.signif",
                       step.group.by = "cancer_type",
                       y.position = "y.position",
                       step.increase = 0.06,
                       size = 7.3) +
  theme(
    axis.title = element_text(size = 24),       
    axis.text = element_text(size = 20),        
    strip.text = element_text(size = 24),      
    legend.text = element_text(size = 23),     
    legend.title = element_text(size = 24),
    panel.spacing = unit(1.5, "lines"),
    axis.text.x = element_text(margin = margin(5,0,10,0),
                               angle = 35, hjust = 1),
    axis.text.y = element_text(margin = margin(0,5,0,10))
  ) +
  geom_quasirandom(alpha = 0.5, size = 3.5)
  #geom_boxplot(lwd = 0.9)

ggsave(
  plot = p1_hdi_mort,
  filename = here("outputs", "p1_hdi_mort.jpeg"),
  width = 14,
  height = 8,
  dpi = 500,
  units = "in")
```

### Human Development Index (HDI) vs mortality to incidence ratio

Visual inspection

```{r}
p_miratio_v_hdi

globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "MIR") |>
  filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  ggplot(aes(sample = asr_world)) + 
  stat_qq() + 
  stat_qq_line() + 
  facet_wrap(~cancer_type,
             scales = "free") + 
  labs(x = "Theoretical Quantiles", 
       y = "Sample Quantiles") + 
  theme_minimal()
```

Perform ANOVA, extract residuals, test normality and homogeneity of variances by cancer type

```{r include=FALSE}
stat_miratio_v_hdi <- 
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "MIR") |>
  filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ hdi_category, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ hdi_category, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_miratio_v_hdi)
```

**Table 2.** Selection of cancer types and statistics for mortality vs edi

| NÂ°  | Cancer type                   | R\^2 | Shapiro P value | Levene P value | ANOVA P values |     |
|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
| 1   | Brain, central nervous system |      | 0.158           | 0.004          | \<0.001        |     |

Pairwise comparison for normally distributed data with unequal variances

```{r}
pw_gh_test_miratio_hdi = 
  globocan_8 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "MIR" & 
           cancer_type %in% c("Prostate",
                              "All cancers excl. non-melanoma skin cancer",
                              "Non-Hodgkin lymphoma",
                              "Rectum",
                              "Leukaemia"
                              )) |> 
  group_by(cancer_type) |> 
  rstatix::games_howell_test(asr_world ~ hdi_category)

View(pw_gh_test_miratio_hdi)
```

### Plotting results

https://rpkgs.datanovia.com/ggpubr/reference/stat_pvalue_manual.html

```{r}
data_mir_hdi_globocan_8 = 
  globocan_8 |>  
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "MIR" & 
           cancer_type %in% c("Prostate",
                              "All cancers excl. non-melanoma skin cancer",
                              "Rectum",
                              "Non-Hodgkin lymphoma",
                              "Leukaemia") & !is.na(hdi_category))

data_mir_hdi_globocan_8$hdi_category <- 
  factor(data_mir_hdi_globocan_8$hdi_category,
         levels = c("Low", "Medium", "High", "Very high"))

pw_gh_test_miratio_hdi <- pw_gh_test_miratio_hdi  |> 
  mutate(y.position = case_when(
    cancer_type == "Prostate" ~ 0.70,
    cancer_type == "All cancers excl. non-melanoma skin cancer" ~ 0.8,
    cancer_type == "Rectum" ~ 0.92,
    cancer_type == "Non-Hodgkin lymphoma" ~ 0.90,
    cancer_type == "Leukaemia" ~ 1
  )) |> 
  dplyr::filter(
    (group1 == "Low" & group2 == "Medium") |
      (group1 == "Medium" & group2 == "High") |
      (group1 == "High" & group2 == "Very high") |
      (group1 == "High" & group2 == "Medium") |
      (group1 == "Very high" & group2 == "High")
    )

p_hdi_mir = 
  ggboxplot(data_mir_hdi_globocan_8, 
            x = "hdi_category", 
            y = "asr_world",
            facet.by = "cancer_type",
            nrow = 1,
            scales = "free",
            xlab = "HDI category",
            ylab = "Mortality to incidence ratio",
            width = 0.5) 

p1_hdi_mir = 
  p_hdi_mir + stat_pvalue_manual(pw_gh_test_miratio_hdi, 
                       label = "p.adj.signif",
                       step.group.by = "cancer_type",
                       y.position = "y.position",
                       step.increase = 0.06,
                       size = 7.3) +
  theme(
    axis.title = element_text(size = 24),       
    axis.text = element_text(size = 20),        
    strip.text = element_text(size = 24),      
    legend.text = element_text(size = 23),     
    legend.title = element_text(size = 24),
    panel.spacing = unit(1.5, "lines"),
    axis.text.x = element_text(margin = margin(5,0,10,0),
                               angle = 35, hjust = 1),
    axis.text.y = element_text(margin = margin(0,5,0,10))
  ) +
  geom_quasirandom(alpha = 0.5, size = 3.5)
  #geom_boxplot(lwd = 0.9)

ggsave(
  plot = p1_hdi_mir,
  filename = here("outputs", "p1_hdi_mir.jpeg"),
  width = 24,
  height = 8,
  dpi = 500,
  units = "in")
```

### Sociodemographic index (SDI) vs Incidence

Visual inspection

```{r}

```

Perform ANOVA, extract residuals, test normality and homogeneity of variances by cancer type

```{r}
stat_incid_v_sdi <-
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Incidence") |>
  filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ sdi_categories, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ sdi_categories, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_incid_v_sdi)
```

**Table 5.** Selection of cancer types and statistics for incidence vs sdi

| NÂ°  | Cancer type                   | R\^2 | Shapiro p value | Levene p value | anova p values |     |
|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
| 1   | Hodgkin lymphoma              |      | 0.896           | \<0.001        | \<0.001        |     |
| 2   | Leukaemia                     |      | 0.495           | 0.023          | \<0.001        |     |
| 3   | Brain, central nervous system |      | 0.486           | \<0.001        | \<0.001        |     |
| 4   | Breast                        |      | 0.185           | \<0.001        | \<0.001        |     |
| 5   | Prostate                      |      | 0.119           | 0.034          | \<0.001        |     |

Pairwise comparison for normally distributed data with equal variances

```{r}
pw_gh_test_inc_sdi = 
  globocan_8 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Incidence" & 
           cancer_type %in% c("Hodgkin lymphoma", 
                              "Leukaemia",
                              "Brain, nervous system",
                              "Breast",
                              "Prostate") & 
           !is.na(sdi_categories) &
           sdi_categories != "" &
           !is.na(asr_world)) |> 
  group_by(cancer_type) |> 
  rstatix::games_howell_test(asr_world ~ sdi_categories)
```

### Plotting results

```{r}
data_inc_sdi_globocan_8 = 
  globocan_8 |>  
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Incidence" & 
           cancer_type %in% c("Hodgkin lymphoma", 
                              "Leukaemia",
                              "Brain, nervous system",
                              "Breast",
                              "Prostate") & 
           !is.na(sdi_categories) &
           sdi_categories != "")

data_inc_sdi_globocan_8$sdi_categories <- 
  factor(data_inc_sdi_globocan_8$sdi_categories,
         levels = c("Low", "Low-middle", "Middle", "High-middle", "High"))

pw_gh_test_inc_sdi <- pw_gh_test_inc_sdi  |> 
  mutate(y.position = case_when(
    cancer_type == "Brain, nervous system" ~ 9,
    cancer_type == "Leukaemia" ~ 13,
    cancer_type == "Breast" ~ 125,
    cancer_type == "Hodgkin lymphoma" ~ 3.5,
    TRUE ~ 110  # Default y.position for other cancer types
  )) |> 
  dplyr::filter(
    (group1 == "Low" & group2 == "Low-middle") |
    (group1 == "Low-middle" & group2 == "Middle") |
    (group1 == "Middle" & group2 == "High-middle") |
    (group1 == "High-middle" & group2 == "High") |
    (group2 == "Low" & group1 == "Low-middle") |
    (group2 == "Low-middle" & group1 == "Middle") |
    (group2 == "Middle" & group1 == "High-middle") |
    (group2 == "High-middle" & group1 == "High")
    )

p_sdi_inc <- ggboxplot(data_inc_sdi_globocan_8, 
               x = "sdi_categories", 
               y = "asr_world",
               facet.by = "cancer_type",
               nrow = 1,
               scales = "free",
               xlab = "SDI category",
               ylab = "Age-standarized incidence rate (per 100,000)",
               width = 0.5
               ) 

p1_sdi_inc = 
  p_sdi_inc + stat_pvalue_manual(pw_gh_test_inc_sdi, 
                       label = "p.adj.signif",
                       step.group.by = "cancer_type",
                       y.position = "y.position",
                       step.increase = 0.06,
                       size = 7.3) +
  theme(
    axis.title = element_text(size = 24),       
    axis.text = element_text(size = 20),        
    strip.text = element_text(size = 24),      
    legend.text = element_text(size = 23),     
    legend.title = element_text(size = 24),
    panel.spacing = unit(2, "lines"),
    axis.text.x = element_text(margin = margin(5,0,10,0),
                               angle = 35, hjust = 1),
    axis.text.y = element_text(margin = margin(0,5,0,10))
  ) +
  geom_quasirandom(alpha = 0.5, size = 3.5)
  #geom_boxplot(lwd = 0.9)

ggsave(
  plot = p1_sdi_inc,
  filename = here("outputs", "p1_sdi_inc.jpeg"),
  width = 24,
  height = 8,
  dpi = 500,
  units = "in")
```

### Sociodemographic index (SDI) vs Mortality

```{r}
stat_mort_v_sdi <- 
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Mortality") |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ sdi_categories, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ sdi_categories, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_mort_v_sdi)
```

**Table 6.** Selection of cancer types and statistics for mortality vs sdi

| NÂ°  | Cancer type                   | R\^2 | Shapiro p value | Levene p value | anova p values |     |
|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
| 1   | Brain, central nervous system |      | 0.699           | 0.013          | \<0.001        |     |
| 2   | Colorectum                    |      | 0.311           | \<0.001        | \<0.001        |     |
| 3   | Kidney                        |      | 0.214           | 0.002          | \<0.001        |     |
| 4   | Pancreas                      |      | 0.106           | \<0.001        | \<0.001        |     |

Pairwise comparison for normally distributed data with equal variances

```{r}
pw_gh_test_mort_sdi = 
  globocan_8 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Mortality" & 
           cancer_type %in% c("Kidney", 
                              "Colorectum",
                              "Brain, nervous system",
                              "Pancreas") & 
           !is.na(sdi_categories) &
           sdi_categories != "" &
           !is.na(asr_world)) |> 
  group_by(cancer_type) |> 
  rstatix::games_howell_test(asr_world ~ sdi_categories)
```
### Plotting results

```{r}
data_mort_sdi_globocan_8 = 
  globocan_8 |>  
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "Mortality" & 
           cancer_type %in% c("Kidney", 
                              "Colorectum",
                              "Brain, nervous system",
                              "Pancreas") & 
           !is.na(sdi_categories) &
           sdi_categories != "")

data_mort_sdi_globocan_8$sdi_categories <- 
  factor(data_mort_sdi_globocan_8$sdi_categories,
         levels = c("Low", "Low-middle", "Middle", "High-middle", "High"))

pw_gh_test_mort_sdi <- pw_gh_test_mort_sdi  |> 
  mutate(y.position = case_when(
    cancer_type == "Kidney" ~ 5,
    cancer_type == "Colorectum" ~ 22,
    cancer_type == "Brain, nervous system" ~ 7,
    cancer_type == "Pancreas" ~ 10
  )) |> 
  dplyr::filter(
    (group1 == "Low" & group2 == "Low-middle") |
    (group1 == "Low-middle" & group2 == "Middle") |
    (group1 == "Middle" & group2 == "High-middle") |
    (group1 == "High-middle" & group2 == "High") |
    (group2 == "Low" & group1 == "Low-middle") |
    (group2 == "Low-middle" & group1 == "Middle") |
    (group2 == "Middle" & group1 == "High-middle") |
    (group2 == "High-middle" & group1 == "High")
    )

p_sdi_mort <- ggboxplot(data_mort_sdi_globocan_8, 
               x = "sdi_categories", 
               y = "asr_world",
               facet.by = "cancer_type",
               nrow = 1,
               scales = "free",
               xlab = "SDI category",
               ylab = "Age-standarized mortality rate (per 100,000)",
               width = 0.5
               ) 

p1_sdi_mort = 
  p_sdi_mort + stat_pvalue_manual(pw_gh_test_mort_sdi, 
                       label = "p.adj.signif",
                       step.group.by = "cancer_type",
                       y.position = "y.position",
                       step.increase = 0.06,
                       size = 7.3) +
  theme(
    axis.title = element_text(size = 24),       
    axis.text = element_text(size = 20),        
    strip.text = element_text(size = 24),      
    legend.text = element_text(size = 23),     
    legend.title = element_text(size = 24),
    panel.spacing = unit(2, "lines"),
    axis.text.x = element_text(margin = margin(5,0,10,0),
                               angle = 35, hjust = 1),
    axis.text.y = element_text(margin = margin(0,5,0,10))
  ) +
  geom_quasirandom(alpha = 0.5, size = 3.5)
  #geom_boxplot(lwd = 0.9)

ggsave(
  plot = p1_sdi_mort,
  filename = here("outputs", "p1_sdi_mort.jpeg"),
  width = 19,
  height = 8,
  dpi = 500,
  units = "in")
```

### Sociodemographic index (HDI) vs mortality to incidence ratio

Visual inspection

```{r}
p_miratio_v_sdi

globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "MIR") |>
  filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  ggplot(aes(sample = asr_world)) + 
  stat_qq() + 
  stat_qq_line() + 
  facet_wrap(~cancer_type,
             scales = "free") + 
  labs(x = "Theoretical Quantiles", 
       y = "Sample Quantiles") + 
  theme_minimal()
```

Perform ANOVA, extract residuals, test normality and homogeneity of variances by cancer type

```{r include=FALSE}
stat_miratio_v_sdi <- 
  globocan_8 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "MIR") |>
  filter(!is.na(asr_world) & !is.nan(asr_world) & !is.infinite(asr_world)) |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ sdi_categories, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ sdi_categories, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_miratio_v_sdi)
```

**Table 2.** Selection of cancer types and statistics for mortality vs edi

| NÂ°  | Cancer type                   | R\^2 | Shapiro P value | Levene P value | ANOVA P values |     |
|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
| 1   | Brain, central nervous system |      | 0.158           | 0.004          | \<0.001        |     |

Pairwise comparison for normally distributed data with unequal variances

```{r}
pw_gh_test_miratio_sdi = 
  globocan_8 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "MIR" & 
           cancer_type %in% c("Multiple myeloma",
                              "Leukaemia",
                              "Non-Hodgkin lymphoma",
                              #"Kaposi sarcoma",
                              "Cervix uteri",
                              "Rectum",
                              "Prostate",
                              "All cancers excl. non-melanoma skin cancer",
                              "Breast",
                              "Lip, oral cavity",
                              "Colorectum"
                              ) &
           !is.na(sdi_categories) &
           sdi_categories != "" &
           !is.na(asr_world)) |> 
  group_by(cancer_type) |> 
  rstatix::games_howell_test(asr_world ~ sdi_categories)

View(pw_gh_test_miratio_sdi)
```

### Plotting results

https://rpkgs.datanovia.com/ggpubr/reference/stat_pvalue_manual.html

```{r}
data_mir_sdi_globocan_8 = 
  globocan_8 |>  
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "MIR" & 
           cancer_type %in% c("Multiple myeloma",
                              "Leukaemia",
                              "Non-Hodgkin lymphoma",
                              #"Kaposi sarcoma",
                              "Cervix uteri",
                              "Rectum",
                              "Prostate",
                              "All cancers excl. non-melanoma skin cancer",
                              "Breast",
                              "Lip, oral cavity",
                              "Colorectum") &
           !is.na(sdi_categories) &
           sdi_categories != "" &
           !is.na(asr_world))

data_mir_sdi_globocan_8$sdi_categories <- 
  factor(data_mir_sdi_globocan_8$sdi_categories,
         levels = c("Low", "Low-middle", "Middle", "High-middle", "High"))

pw_gh_test_miratio_sdi <- pw_gh_test_miratio_sdi  |> 
  mutate(y.position = case_when(
    cancer_type == "Prostate" ~ 0.70,
    cancer_type == "All cancers excl. non-melanoma skin cancer" ~ 0.8,
    cancer_type == "Rectum" ~ 0.92,
    cancer_type == "Non-Hodgkin lymphoma" ~ 0.90,
    cancer_type == "Multiple myeloma" ~ 0.95,
    cancer_type == "Cervix uteri" ~ 0.9,
    cancer_type == "Breast" ~ 0.9,
    cancer_type == "Lip, oral cavity" ~ 0.95,
    cancer_type == "Leukaemia" ~ 0.9,
    cancer_type == "Colorectum" ~ 0.9
  )) |> 
  dplyr::filter(
    (group1 == "Low" & group2 == "Low-middle") |
    (group1 == "Low-middle" & group2 == "Middle") |
    (group1 == "Middle" & group2 == "High-middle") |
    (group1 == "High-middle" & group2 == "High") |
    (group2 == "Low" & group1 == "Low-middle") |
    (group2 == "Low-middle" & group1 == "Middle") |
    (group2 == "Middle" & group1 == "High-middle") |
    (group2 == "High-middle" & group1 == "High")
    )

p_sdi_mir = 
  ggboxplot(data_mir_sdi_globocan_8, 
            x = "sdi_categories", 
            y = "asr_world",
            facet.by = "cancer_type",
            nrow = 2,
            scales = "free",
            xlab = "SDI category",
            ylab = "Mortality to incidence ratio",
            width = 0.5) 

p1_sdi_mir = 
  p_sdi_mir + stat_pvalue_manual(pw_gh_test_miratio_sdi, 
                       label = "p.adj.signif",
                       step.group.by = "cancer_type",
                       y.position = "y.position",
                       step.increase = 0.06,
                       size = 7.3) +
  theme(
    axis.title = element_text(size = 24),       
    axis.text = element_text(size = 20),        
    strip.text = element_text(size = 24),      
    legend.text = element_text(size = 23),     
    legend.title = element_text(size = 24),
    panel.spacing = unit(1.5, "lines"),
    axis.text.x = element_text(margin = margin(5,0,10,0),
                               angle = 35, hjust = 1),
    axis.text.y = element_text(margin = margin(0,5,0,10))
  ) +
  geom_quasirandom(alpha = 0.5, size = 3.5)
  #geom_boxplot(lwd = 0.9)

ggsave(
  plot = p1_sdi_mir,
  filename = here("outputs", "p1_sdi_mir.jpeg"),
  width = 26,
  height = 16,
  dpi = 500,
  units = "in")


figure_4 <- (
    p1_edi_mort + p1_hdi_mort
) +
    plot_layout(ncol = 2, guides = 'collect', widths = c(1, 3)) &
    theme(legend.position = element_blank())

p1_edi_mort_inc <- (
    (p1_edi_mort) + 
    (p1_hdi_mort + theme(axis.title.y = element_blank()))) +
    plot_layout(ncol = 2, guides = 'collect', widths = c(0.85, 3)) &
    theme(legend.position = element_blank())

ggsave(
  plot = p1_edi_mort_inc,
  filename = here("outputs", "p1_edi_mort_inc.jpeg"),
  width = 19,
  height = 8,
  dpi = 500,
  units = "in")

p1_edi_hdi_sdi_mir <- (
  p1_edi_mir + 
  p1_hdi_mir +
  p1_sdi_mir) +
    plot_layout(ncol = 1, guides = 'collect', heights = c(1, 1, 2.7)) &
    theme(legend.position = element_blank())

ggsave(
  plot = p1_edi_hdi_sdi_mir,
  filename = here("outputs", "p1_edi_hdi_sdi_mir.jpeg"),
  width = 26,
  height = 25,
  dpi = 500,
  units = "in")

=======
# Model 1. Simple linear regression

```{r}
data_test <- globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  dplyr::filter(indicator == "incidence", 
                cancer_type == " Brain, central nervous system" | cancer_type == "Bladder")
```

```{r fig.width=10}
model <- lm(education_and_income ~ asr_world, data = data_test)

a <- ggplot(data_test, aes(y = asr_world, x = education_and_income)) +
  geom_point() +
  geom_smooth(
    method = "lm",
    formula = y ~ x,
    se = FALSE,
    col = "dodgerblue1") +
  theme_light() + 
  facet_wrap(~cancer_type, 
             scales = "free")
a
>>>>>>> carlos_branch
```

# Model 2. Logarithmic models

```{r}
model_log <- lm(education_and_income ~ log(asr_world), data = data_test)

b <- ggplot(data_test, aes(y = asr_world, x = education_and_income)) +
  geom_point() +
  geom_smooth(
    method = "lm",
    formula = y ~ log(x),
    se = FALSE,
    col = "dodgerblue1") +
  theme_light() +
  facet_wrap(~cancer_type, 
             scales = "free")
b
```

# Model 3. Polynomial models

```{r fig.width=10}
model_poly_quadratic <- lm(education_and_income ~ asr_world + I(asr_world^2), data = data_test)

c <- ggplot(data_test, aes(y = asr_world, x = education_and_income)) +
  geom_point() +
  geom_smooth(
    method = "lm",
    formula = y ~ x + I(x ^ 2), 
    se = FALSE,
    col = "dodgerblue1") +
  theme_light() +
  facet_wrap(~cancer_type, 
             scales = "free")
c
```

```{r}
model_poly_cubic <- lm(education_and_income ~ asr_world + I(asr_world^2) + I(asr_world^3),
                       data = data_test)

d <- ggplot(data_test, aes(y = asr_world, x = education_and_income)) +
  geom_point() +
  geom_smooth(
    method = "lm",
    formula = y ~ x + I(x ^ 2) + I(x ^ 3), 
    se = FALSE,
    col = "dodgerblue1") +
  theme_light() +
  facet_wrap(~cancer_type, 
             scales = "free")
d
```

# Model 4. Polynomial models with splines

```{r}
test <- data_test |>
  dplyr::select(education_and_income, asr_world)
<<<<<<< HEAD
plot(test,
     pch = 19,
     ylim = c(0, 15),
     las = 1)
abline(v = 0.7,
       lty = "dotted",
       col = 'tomato')
abline(v = 0.85,
       lty = "dotted",
       col = 'tomato')
text(x = 0.7,
     y = 0.3,
     't=0.55',
     col = 'tomato')
text(x = 0.85,
     y = 0.3,
     't=0.55',
     col = 'tomato')
=======
plot(test, pch=19, ylim=c(0, 15), las=1)
abline(v=0.7, lty="dotted", col='tomato')
abline(v=0.85, lty="dotted", col='tomato')
text(x=0.7, y=0.3, 't=0.55', col='tomato')
text(x=0.85, y=0.3, 't=0.55', col='tomato')
>>>>>>> carlos_branch
```

```{r fig.width=10}
model_spline_1_knot <- lm(education_and_income ~ ns(asr_world, df = 3), data_test)

x <- data_test$asr_world
y <- data_test$education_and_income

plot(x, y, main = "Spline Regression", xlab = "X", ylab = "Y")
lines(x, predict(model_spline_1_knot), col = "red", lwd = 2)
legend("topright", legend = "Fitted Spline", col = "red", lwd = 2)

d <- ggplot(data_test, aes(y = asr_world, x = education_and_income)) +
  geom_point()+
  geom_smooth(
    method = "lm",
    formula = y ~ x + I(x ^ 2) + I(x ^ 3), 
    se = FALSE,
    col = "dodgerblue1") + 
  stat_spline() +
  theme_light() +
  facet_wrap(~cancer_type, 
             scales = "free")
d

ggplot(d,aes(x,y)) + geom_point() + 
  geom_line(data=data.frame(spline(d, n=n*10)))

performance::compare_performance(model_poly_cubic, model_spline_1_knot)
broom::glance(model_poly_cubic)
broom::glance(model_spline_1_knot)
```

<<<<<<< HEAD
=======

>>>>>>> carlos_branch
```{r fig.width=12}
plot(compare_performance(model_poly_cubic, model_spline_1_knot))
```

```{r}
fit.sp = smooth.spline(education_and_income ~ asr_world, nknots=15,  data_test)
```

```{r}
gam(wage ~ s(year, 4) + s(age, 5) + education, data = Wage)
```
<<<<<<< HEAD
=======


## Step one: fit the simple linear model grouped by cancer_type

https://stats.stackexchange.com/questions/551264/when-to-check-model-assumptions

https://stackoverflow.com/questions/1169539/linear-regression-and-group-by-in-r

### human development index

```{r}
slm_hdi <- function(data) {
  lm(asr_world ~ human_development_index, data = data)
}
```

Incidence

```{r}
data_x <-
  globocan_5 |>
  dplyr::distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  dplyr::filter(indicator == "incidence" & cancer_type == "Breast")

lm(asr_world ~ human_development_index, data = data_x) |>
  summary()


models <-
  globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "incidence") |>
  group_by(cancer_type) |>
  nest() |>
  mutate(model = map(data, function(data) {
    lm(asr_world ~ human_development_index, data = data)
  }))

m_1 <- models |>
  mutate(summary = map(model, broom::tidy)) |>
  unnest(summary) |>
  filter(term != "(Intercept)") |>
  select(-data, -model, -term) |>
  mutate(across(where(is.numeric), round, 2))

m_2 <- models  |>
  mutate(summary = map(model, broom::glance)) |>
  unnest(summary) |>
  select(-data, -model) |>
  mutate(across(where(is.numeric), round, 2))

colnames(m_3)

m_3 <- bind_cols(m_1, m_2) |>
  dplyr::select(
    cancer_type...1,
    estimate,
    r.squared,
    adj.r.squared,
    statistic...4,
    p.value...5,
    statistic...10,
    p.value...11,
    AIC,
    BIC,
    deviance
  ) |>
  dplyr::rename(
    `Cancer type` = cancer_type...1,
    Estimate = estimate,
    `R-squared` = r.squared,
    `Adjusted R-squared` = adj.r.squared,
    `T-statistic` = statistic...4,
    `T p-value` = p.value...5,
    `F-statistic` = statistic...10,
    `F p-value` = p.value...11,
    Deviance = deviance
  )
```

Mortality

```{r}
models <- 
  globocan_5 |> 
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |>
  filter(indicator == "incidence") |> 
  group_by(cancer_type) |> 
  nest() |> 
  mutate(model = map(data, slm_hdi))

summarized = models  |> 
  mutate(summary = map(model, broom::glance)) %>%
  unnest(summary)

summarized = summarized |> select(-data, -model)
```

```{r}
lm_spec <- linear_reg() |> 
  set_mode("regression") |> 
  set_engine("lm")

lm_fit <- fit(lm_spec, asr_world ~ human_development_index, data = incid)

lm_fit %>%
  check_model()
```

# Model 3. One-factor ANOVA on selected cancers

Main Reference: https://bmjopen.bmj.com/content/bmjopen/9/10/e028461.full.pdf

Categorical variables: hdi, sdi, edi Continuous variables: Mortality, Incidence

Pairwise comparisons Tamhane T2 test for variables with normal distribution but heterogeneous variances ------- for

## Step 1: Select cancer types based visual inspection and normality test

### Education and Income index (EDI) vs Incidence

Visual inspection

```{r}
p_incidence_v_edi
```

```{r include=FALSE}
stat_incid_v_edi <-
  globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "incidence") |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ edi_categories, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ edi_categories, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_incid_v_edi)
```

**Table 1.** Selection of cancer types and statistics for incidence vs edi

| NÂ°  | Cancer type                                | R\^2 | Shapiro p value | Levene p value | anova p values |     |
|---------|-------------------|---------|---------|---------|---------|---------|
| 1   | All cancers excl. non-melanoma skin cancer | 0.6  | 0.155           | 0.683          | \<0.001        |     |
| 2   | Breast                                     | 0.63 | 0.449           | 0.282          | \<0.001        |     |
| 3   | Hodking Lymphoma                           | 0.54 | 0.570           | 0.182          | \<0.001        |     |
| 4   | *Larynx*                                   | 0.1  | 0.055           | 0.086          | \<0.001        |     |
| 5   | Leukaemia                                  | 0.62 | 0.598           | 0.167          | \<0.001        |     |
| 6   | Prostate                                   | 0.23 | 0.106           | 0.210          | \<0.001        |     |
| 7   | Trachea, bronchus and lung                 | 0.43 | 0.620           | 0.092          | \<0.001        |     |
| 8   | Colorectum                                 | 0.64 | 0.090           | 0.002          | \<0.001        |     |
| 9   | Non-hodking lymphoma                       | 0.43 | 0.975           | 0.001          | \<0.001        |     |
| 10  | Pancreas                                   | 0.62 | 0.204           | 0.017          | \<0.001        |     |
| 11  | Rectum                                     | 0.45 | 0.397           | \<0.001        | \<0.001        |     |
| 12  |                                            |      |                 |                |                |     |

### Education and Income index (EDI) vs mortality

Visual inspection

```{r}
p_mortality_v_edi
```

```{r include=FALSE}
stat_mort_v_edi <- 
  globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "mortality") |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ edi_categories, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ edi_categories, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_mort_v_edi)
```

**Table 2.** Selection of cancer types and statistics for mortality vs edi

| NÂ°  | Cancer type                                | R\^2 | Shapiro p value | Levene p value | anova p values |     |
|---------|-------------------|---------|---------|---------|---------|---------|
| 1   | All cancers excl. non-melanoma skin cancer |      |                 |                |                |     |
| 2   |                                            |      |                 |                |                |     |
| 3   |                                            |      |                 |                |                |     |
| 4   |                                            |      |                 |                |                |     |
| 5   |                                            |      |                 |                |                |     |
| 6   |                                            |      |                 |                |                |     |
| 7   |                                            |      |                 |                |                |     |
| 8   |                                            |      |                 |                |                |     |
| 9   |                                            |      |                 |                |                |     |
| 10  |                                            |      |                 |                |                |     |
| 11  |                                            |      |                 |                |                |     |
| 12  |                                            |      |                 |                |                |     |

### Human Development Index (HDI) vs Incidence

Visual inspection

```{r}
p_incidence_vs_hdi
```

Perform ANOVA, extract residuals, test normality and homogeneity of variances by cancer type

```{r include=FALSE}
stat_incid_v_hdi <-
  globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "incidence") |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ hdi_category, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ hdi_category, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_incid_v_hdi)
```

### Human Development Index (HDI) vs Mortality

```{r}
stat_mort_v_hdi <- 
  globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "mortality") |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ hdi_category, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ hdi_category, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_mort_v_hdi)
```

### Sociodemographic index (SDI) vs Incidence

Visual inspection

```{r}

```

Perform ANOVA, extract residuals, test normality and homogeneity of variances by cancer type

```{r}
stat_incid_v_sdi <-
  globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "incidence") |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ sdi_categories, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ sdi_categories, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_incid_v_sdi)
```

### Sociodemographic index (SDI) vs Mortality

```{r}
stat_mort_v_sdi <- 
  globocan_5 |>
  distinct(cancer_type, country_name, indicator, .keep_all = TRUE) |> 
  filter(indicator == "mortality") |>
  group_by(cancer_type) |>
  do({
    # Perform one-factor ANOVA
    anova_model <- aov(asr_world ~ sdi_categories, data = .)
    
    # Extract residuals
    residuals_data <- residuals(anova_model)
    
    # Perform Levene's Test for homogeneity of variances
    levene_test <- leveneTest(asr_world ~ sdi_categories, data = .)
    
    # Extract ANOVA p-value
    anova_summary <- summary(anova_model)
    anova_p_value <- anova_summary[[1]]$`Pr(>F)`[1]
    
    # Check if residuals are identical
    if (length(unique(residuals_data)) == 1) {
      # Return NA for groups with identical residuals
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = NA,
        shapiro_statistic = NA,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    } else {
      # Test normality of residuals
      shapiro_test <- shapiro.test(residuals_data)
      
      # Return results
      data.frame(
        cancer_type = unique(.$cancer_type),
        shapiro_p_value = shapiro_test$p.value,
        shapiro_statistic = shapiro_test$statistic,
        levene_p_value = levene_test$`Pr(>F)`[1],
        anova_p_value = anova_p_value
      )
    }
  }) |>
  ungroup()

View(stat_mort_v_sdi)
```
>>>>>>> carlos_branch
